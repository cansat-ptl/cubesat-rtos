
yktsat-rtos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00800100  00001770  00001804  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001770  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000bc7  00800178  00800178  0000187c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  00001918  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d21  00000000  00000000  00001b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001500  00000000  00000000  000048b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015b6  00000000  00000000  00005db9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000518  00000000  00000000  00007370  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d07  00000000  00000000  00007888  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015d6  00000000  00000000  0000858f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  00009b65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c6 c0       	rjmp	.+396    	; 0x18e <__ctors_end>
       2:	00 00       	nop
       4:	e2 c0       	rjmp	.+452    	; 0x1ca <__bad_interrupt>
       6:	00 00       	nop
       8:	e0 c0       	rjmp	.+448    	; 0x1ca <__bad_interrupt>
       a:	00 00       	nop
       c:	de c0       	rjmp	.+444    	; 0x1ca <__bad_interrupt>
       e:	00 00       	nop
      10:	dc c0       	rjmp	.+440    	; 0x1ca <__bad_interrupt>
      12:	00 00       	nop
      14:	da c0       	rjmp	.+436    	; 0x1ca <__bad_interrupt>
      16:	00 00       	nop
      18:	d8 c0       	rjmp	.+432    	; 0x1ca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d6 c0       	rjmp	.+428    	; 0x1ca <__bad_interrupt>
      1e:	00 00       	nop
      20:	d4 c0       	rjmp	.+424    	; 0x1ca <__bad_interrupt>
      22:	00 00       	nop
      24:	d2 c0       	rjmp	.+420    	; 0x1ca <__bad_interrupt>
      26:	00 00       	nop
      28:	d0 c0       	rjmp	.+416    	; 0x1ca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ce c0       	rjmp	.+412    	; 0x1ca <__bad_interrupt>
      2e:	00 00       	nop
      30:	cc c0       	rjmp	.+408    	; 0x1ca <__bad_interrupt>
      32:	00 00       	nop
      34:	ca c0       	rjmp	.+404    	; 0x1ca <__bad_interrupt>
      36:	00 00       	nop
      38:	c8 c0       	rjmp	.+400    	; 0x1ca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a9 c5       	rjmp	.+2898   	; 0xb90 <__vector_15>
      3e:	00 00       	nop
      40:	c4 c0       	rjmp	.+392    	; 0x1ca <__bad_interrupt>
      42:	00 00       	nop
      44:	c2 c0       	rjmp	.+388    	; 0x1ca <__bad_interrupt>
      46:	00 00       	nop
      48:	c0 c0       	rjmp	.+384    	; 0x1ca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	be c0       	rjmp	.+380    	; 0x1ca <__bad_interrupt>
      4e:	00 00       	nop
      50:	bc c0       	rjmp	.+376    	; 0x1ca <__bad_interrupt>
      52:	00 00       	nop
      54:	ba c0       	rjmp	.+372    	; 0x1ca <__bad_interrupt>
      56:	00 00       	nop
      58:	b8 c0       	rjmp	.+368    	; 0x1ca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b6 c0       	rjmp	.+364    	; 0x1ca <__bad_interrupt>
      5e:	00 00       	nop
      60:	b4 c0       	rjmp	.+360    	; 0x1ca <__bad_interrupt>
      62:	00 00       	nop
      64:	b2 c0       	rjmp	.+356    	; 0x1ca <__bad_interrupt>
      66:	00 00       	nop
      68:	b0 c0       	rjmp	.+352    	; 0x1ca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ae c0       	rjmp	.+348    	; 0x1ca <__bad_interrupt>
      6e:	00 00       	nop
      70:	ac c0       	rjmp	.+344    	; 0x1ca <__bad_interrupt>
      72:	00 00       	nop
      74:	aa c0       	rjmp	.+340    	; 0x1ca <__bad_interrupt>
      76:	00 00       	nop
      78:	a8 c0       	rjmp	.+336    	; 0x1ca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a6 c0       	rjmp	.+332    	; 0x1ca <__bad_interrupt>
      7e:	00 00       	nop
      80:	a4 c0       	rjmp	.+328    	; 0x1ca <__bad_interrupt>
      82:	00 00       	nop
      84:	a2 c0       	rjmp	.+324    	; 0x1ca <__bad_interrupt>
      86:	00 00       	nop
      88:	a0 c0       	rjmp	.+320    	; 0x1ca <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	6e 61       	ori	r22, 0x1E	; 30
      8e:	6e 00       	.word	0x006e	; ????

00000090 <__c.2332>:
      90:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      a0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      b0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      c0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      d0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      e0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      f0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     100:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     110:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     120:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     130:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     140:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     150:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     160:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     170:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     180:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000018e <__ctors_end>:
     18e:	11 24       	eor	r1, r1
     190:	1f be       	out	0x3f, r1	; 63
     192:	cf ef       	ldi	r28, 0xFF	; 255
     194:	d0 e1       	ldi	r29, 0x10	; 16
     196:	de bf       	out	0x3e, r29	; 62
     198:	cd bf       	out	0x3d, r28	; 61

0000019a <__do_copy_data>:
     19a:	11 e0       	ldi	r17, 0x01	; 1
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	e0 e7       	ldi	r30, 0x70	; 112
     1a2:	f7 e1       	ldi	r31, 0x17	; 23
     1a4:	00 e0       	ldi	r16, 0x00	; 0
     1a6:	0b bf       	out	0x3b, r16	; 59
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <__do_copy_data+0x14>
     1aa:	07 90       	elpm	r0, Z+
     1ac:	0d 92       	st	X+, r0
     1ae:	a8 37       	cpi	r26, 0x78	; 120
     1b0:	b1 07       	cpc	r27, r17
     1b2:	d9 f7       	brne	.-10     	; 0x1aa <__do_copy_data+0x10>

000001b4 <__do_clear_bss>:
     1b4:	2d e0       	ldi	r18, 0x0D	; 13
     1b6:	a8 e7       	ldi	r26, 0x78	; 120
     1b8:	b1 e0       	ldi	r27, 0x01	; 1
     1ba:	01 c0       	rjmp	.+2      	; 0x1be <.do_clear_bss_start>

000001bc <.do_clear_bss_loop>:
     1bc:	1d 92       	st	X+, r1

000001be <.do_clear_bss_start>:
     1be:	af 33       	cpi	r26, 0x3F	; 63
     1c0:	b2 07       	cpc	r27, r18
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <.do_clear_bss_loop>
     1c4:	97 d5       	rcall	.+2862   	; 0xcf4 <main>
     1c6:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <_exit>

000001ca <__bad_interrupt>:
     1ca:	1a cf       	rjmp	.-460    	; 0x0 <__vectors>

000001cc <arch_tick>:
	sts SPH, r0
;-----------------------------------------------------
.endm

arch_tick:
	_arch_save_context_m
     1cc:	0f 92       	push	r0
     1ce:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     1d2:	f8 94       	cli
     1d4:	0f 92       	push	r0
     1d6:	1f 92       	push	r1
     1d8:	11 24       	eor	r1, r1
     1da:	2f 92       	push	r2
     1dc:	3f 92       	push	r3
     1de:	4f 92       	push	r4
     1e0:	5f 92       	push	r5
     1e2:	6f 92       	push	r6
     1e4:	7f 92       	push	r7
     1e6:	8f 92       	push	r8
     1e8:	9f 92       	push	r9
     1ea:	af 92       	push	r10
     1ec:	bf 92       	push	r11
     1ee:	cf 92       	push	r12
     1f0:	df 92       	push	r13
     1f2:	ef 92       	push	r14
     1f4:	ff 92       	push	r15
     1f6:	0f 93       	push	r16
     1f8:	1f 93       	push	r17
     1fa:	2f 93       	push	r18
     1fc:	3f 93       	push	r19
     1fe:	4f 93       	push	r20
     200:	5f 93       	push	r21
     202:	6f 93       	push	r22
     204:	7f 93       	push	r23
     206:	8f 93       	push	r24
     208:	9f 93       	push	r25
     20a:	af 93       	push	r26
     20c:	bf 93       	push	r27
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	ef 93       	push	r30
     214:	ff 93       	push	r31
     216:	a0 91 e0 0b 	lds	r26, 0x0BE0	; 0x800be0 <kSchedCPUState>
     21a:	b0 91 e1 0b 	lds	r27, 0x0BE1	; 0x800be1 <kSchedCPUState+0x1>
     21e:	00 90 5d 00 	lds	r0, 0x005D	; 0x80005d <__TEXT_REGION_LENGTH__+0x7e005d>
     222:	0d 92       	st	X+, r0
     224:	00 90 5e 00 	lds	r0, 0x005E	; 0x80005e <__TEXT_REGION_LENGTH__+0x7e005e>
     228:	0d 92       	st	X+, r0
     22a:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     22e:	00 92 5d 00 	sts	0x005D, r0	; 0x80005d <__TEXT_REGION_LENGTH__+0x7e005d>
     232:	00 90 01 01 	lds	r0, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     236:	00 92 5e 00 	sts	0x005E, r0	; 0x80005e <__TEXT_REGION_LENGTH__+0x7e005e>
	call tasks_tick
     23a:	e4 d2       	rcall	.+1480   	; 0x804 <tasks_tick>
	_arch_restore_context_m
     23c:	00 90 5d 00 	lds	r0, 0x005D	; 0x80005d <__TEXT_REGION_LENGTH__+0x7e005d>
     240:	00 92 00 01 	sts	0x0100, r0	; 0x800100 <__DATA_REGION_ORIGIN__>
     244:	00 90 5e 00 	lds	r0, 0x005E	; 0x80005e <__TEXT_REGION_LENGTH__+0x7e005e>
     248:	00 92 01 01 	sts	0x0101, r0	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     24c:	a0 91 e0 0b 	lds	r26, 0x0BE0	; 0x800be0 <kSchedCPUState>
     250:	b0 91 e1 0b 	lds	r27, 0x0BE1	; 0x800be1 <kSchedCPUState+0x1>
     254:	0d 90       	ld	r0, X+
     256:	00 92 5d 00 	sts	0x005D, r0	; 0x80005d <__TEXT_REGION_LENGTH__+0x7e005d>
     25a:	0d 90       	ld	r0, X+
     25c:	00 92 5e 00 	sts	0x005E, r0	; 0x80005e <__TEXT_REGION_LENGTH__+0x7e005e>
     260:	ff 91       	pop	r31
     262:	ef 91       	pop	r30
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	bf 91       	pop	r27
     26a:	af 91       	pop	r26
     26c:	9f 91       	pop	r25
     26e:	8f 91       	pop	r24
     270:	7f 91       	pop	r23
     272:	6f 91       	pop	r22
     274:	5f 91       	pop	r21
     276:	4f 91       	pop	r20
     278:	3f 91       	pop	r19
     27a:	2f 91       	pop	r18
     27c:	1f 91       	pop	r17
     27e:	0f 91       	pop	r16
     280:	ff 90       	pop	r15
     282:	ef 90       	pop	r14
     284:	df 90       	pop	r13
     286:	cf 90       	pop	r12
     288:	bf 90       	pop	r11
     28a:	af 90       	pop	r10
     28c:	9f 90       	pop	r9
     28e:	8f 90       	pop	r8
     290:	7f 90       	pop	r7
     292:	6f 90       	pop	r6
     294:	5f 90       	pop	r5
     296:	4f 90       	pop	r4
     298:	3f 90       	pop	r3
     29a:	2f 90       	pop	r2
     29c:	1f 90       	pop	r1
     29e:	78 94       	sei
     2a0:	0f 90       	pop	r0
     2a2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     2a6:	0f 90       	pop	r0
	ret
     2a8:	08 95       	ret

000002aa <arch_yield>:

arch_yield:
	_arch_save_context_m
     2aa:	0f 92       	push	r0
     2ac:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     2b0:	f8 94       	cli
     2b2:	0f 92       	push	r0
     2b4:	1f 92       	push	r1
     2b6:	11 24       	eor	r1, r1
     2b8:	2f 92       	push	r2
     2ba:	3f 92       	push	r3
     2bc:	4f 92       	push	r4
     2be:	5f 92       	push	r5
     2c0:	6f 92       	push	r6
     2c2:	7f 92       	push	r7
     2c4:	8f 92       	push	r8
     2c6:	9f 92       	push	r9
     2c8:	af 92       	push	r10
     2ca:	bf 92       	push	r11
     2cc:	cf 92       	push	r12
     2ce:	df 92       	push	r13
     2d0:	ef 92       	push	r14
     2d2:	ff 92       	push	r15
     2d4:	0f 93       	push	r16
     2d6:	1f 93       	push	r17
     2d8:	2f 93       	push	r18
     2da:	3f 93       	push	r19
     2dc:	4f 93       	push	r20
     2de:	5f 93       	push	r21
     2e0:	6f 93       	push	r22
     2e2:	7f 93       	push	r23
     2e4:	8f 93       	push	r24
     2e6:	9f 93       	push	r25
     2e8:	af 93       	push	r26
     2ea:	bf 93       	push	r27
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	ef 93       	push	r30
     2f2:	ff 93       	push	r31
     2f4:	a0 91 e0 0b 	lds	r26, 0x0BE0	; 0x800be0 <kSchedCPUState>
     2f8:	b0 91 e1 0b 	lds	r27, 0x0BE1	; 0x800be1 <kSchedCPUState+0x1>
     2fc:	00 90 5d 00 	lds	r0, 0x005D	; 0x80005d <__TEXT_REGION_LENGTH__+0x7e005d>
     300:	0d 92       	st	X+, r0
     302:	00 90 5e 00 	lds	r0, 0x005E	; 0x80005e <__TEXT_REGION_LENGTH__+0x7e005e>
     306:	0d 92       	st	X+, r0
     308:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     30c:	00 92 5d 00 	sts	0x005D, r0	; 0x80005d <__TEXT_REGION_LENGTH__+0x7e005d>
     310:	00 90 01 01 	lds	r0, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     314:	00 92 5e 00 	sts	0x005E, r0	; 0x80005e <__TEXT_REGION_LENGTH__+0x7e005e>
	call tasks_switchTask
     318:	64 d2       	rcall	.+1224   	; 0x7e2 <tasks_switchTask>
	_arch_restore_context_m
     31a:	00 90 5d 00 	lds	r0, 0x005D	; 0x80005d <__TEXT_REGION_LENGTH__+0x7e005d>
     31e:	00 92 00 01 	sts	0x0100, r0	; 0x800100 <__DATA_REGION_ORIGIN__>
     322:	00 90 5e 00 	lds	r0, 0x005E	; 0x80005e <__TEXT_REGION_LENGTH__+0x7e005e>
     326:	00 92 01 01 	sts	0x0101, r0	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     32a:	a0 91 e0 0b 	lds	r26, 0x0BE0	; 0x800be0 <kSchedCPUState>
     32e:	b0 91 e1 0b 	lds	r27, 0x0BE1	; 0x800be1 <kSchedCPUState+0x1>
     332:	0d 90       	ld	r0, X+
     334:	00 92 5d 00 	sts	0x005D, r0	; 0x80005d <__TEXT_REGION_LENGTH__+0x7e005d>
     338:	0d 90       	ld	r0, X+
     33a:	00 92 5e 00 	sts	0x005E, r0	; 0x80005e <__TEXT_REGION_LENGTH__+0x7e005e>
     33e:	ff 91       	pop	r31
     340:	ef 91       	pop	r30
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	bf 91       	pop	r27
     348:	af 91       	pop	r26
     34a:	9f 91       	pop	r25
     34c:	8f 91       	pop	r24
     34e:	7f 91       	pop	r23
     350:	6f 91       	pop	r22
     352:	5f 91       	pop	r21
     354:	4f 91       	pop	r20
     356:	3f 91       	pop	r19
     358:	2f 91       	pop	r18
     35a:	1f 91       	pop	r17
     35c:	0f 91       	pop	r16
     35e:	ff 90       	pop	r15
     360:	ef 90       	pop	r14
     362:	df 90       	pop	r13
     364:	cf 90       	pop	r12
     366:	bf 90       	pop	r11
     368:	af 90       	pop	r10
     36a:	9f 90       	pop	r9
     36c:	8f 90       	pop	r8
     36e:	7f 90       	pop	r7
     370:	6f 90       	pop	r6
     372:	5f 90       	pop	r5
     374:	4f 90       	pop	r4
     376:	3f 90       	pop	r3
     378:	2f 90       	pop	r2
     37a:	1f 90       	pop	r1
     37c:	78 94       	sei
     37e:	0f 90       	pop	r0
     380:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     384:	0f 90       	pop	r0
	ret
     386:	08 95       	ret

00000388 <kernel_init>:
#include <tasks/tasks.h>
#include <arch/arch.h>

void kernel_init()
{
	arch_platformInit();
     388:	05 d4       	rcall	.+2058   	; 0xb94 <arch_platformInit>
	tasks_init();
     38a:	a3 d1       	rcall	.+838    	; 0x6d2 <tasks_init>
     38c:	82 e0       	ldi	r24, 0x02	; 2
	uart_puts("Hello from OS init!\r\n");
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	f3 c3       	rjmp	.+2022   	; 0xb78 <uart_puts>

00000392 <memory_insertFreeBlock>:
     392:	cf 93       	push	r28
}

size_t memory_getFreeHeapMin()
{
	return kMinimumFreeMemory;
}
     394:	df 93       	push	r29
     396:	ec 01       	movw	r28, r24
     398:	ae e7       	ldi	r26, 0x7E	; 126
     39a:	b1 e0       	ldi	r27, 0x01	; 1
     39c:	01 c0       	rjmp	.+2      	; 0x3a0 <memory_insertFreeBlock+0xe>
     39e:	df 01       	movw	r26, r30
     3a0:	ed 91       	ld	r30, X+
     3a2:	fc 91       	ld	r31, X
     3a4:	11 97       	sbiw	r26, 0x01	; 1
     3a6:	ec 17       	cp	r30, r28
     3a8:	fd 07       	cpc	r31, r29
     3aa:	c8 f3       	brcs	.-14     	; 0x39e <memory_insertFreeBlock+0xc>
     3ac:	12 96       	adiw	r26, 0x02	; 2
     3ae:	2d 91       	ld	r18, X+
     3b0:	3c 91       	ld	r19, X
     3b2:	13 97       	sbiw	r26, 0x03	; 3
     3b4:	cd 01       	movw	r24, r26
     3b6:	82 0f       	add	r24, r18
     3b8:	93 1f       	adc	r25, r19
     3ba:	c8 17       	cp	r28, r24
     3bc:	d9 07       	cpc	r29, r25
     3be:	91 f0       	breq	.+36     	; 0x3e4 <memory_insertFreeBlock+0x52>
     3c0:	8a 81       	ldd	r24, Y+2	; 0x02
     3c2:	9b 81       	ldd	r25, Y+3	; 0x03
     3c4:	9e 01       	movw	r18, r28
     3c6:	28 0f       	add	r18, r24
     3c8:	39 1f       	adc	r19, r25
     3ca:	e2 17       	cp	r30, r18
     3cc:	f3 07       	cpc	r31, r19
     3ce:	c9 f0       	breq	.+50     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3d0:	f9 83       	std	Y+1, r31	; 0x01
     3d2:	e8 83       	st	Y, r30
     3d4:	ca 17       	cp	r28, r26
     3d6:	db 07       	cpc	r29, r27
     3d8:	11 f0       	breq	.+4      	; 0x3de <memory_insertFreeBlock+0x4c>
     3da:	cd 93       	st	X+, r28
     3dc:	dc 93       	st	X, r29
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret
     3e4:	8a 81       	ldd	r24, Y+2	; 0x02
     3e6:	9b 81       	ldd	r25, Y+3	; 0x03
     3e8:	82 0f       	add	r24, r18
     3ea:	93 1f       	adc	r25, r19
     3ec:	13 96       	adiw	r26, 0x03	; 3
     3ee:	9c 93       	st	X, r25
     3f0:	8e 93       	st	-X, r24
     3f2:	12 97       	sbiw	r26, 0x02	; 2
     3f4:	ed 01       	movw	r28, r26
     3f6:	9e 01       	movw	r18, r28
     3f8:	28 0f       	add	r18, r24
     3fa:	39 1f       	adc	r19, r25
     3fc:	e2 17       	cp	r30, r18
     3fe:	f3 07       	cpc	r31, r19
     400:	39 f7       	brne	.-50     	; 0x3d0 <memory_insertFreeBlock+0x3e>
     402:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <kHeapEnd>
     406:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <kHeapEnd+0x1>
     40a:	e2 17       	cp	r30, r18
     40c:	f3 07       	cpc	r31, r19
     40e:	01 f3       	breq	.-64     	; 0x3d0 <memory_insertFreeBlock+0x3e>
     410:	22 81       	ldd	r18, Z+2	; 0x02
     412:	33 81       	ldd	r19, Z+3	; 0x03
     414:	82 0f       	add	r24, r18
     416:	93 1f       	adc	r25, r19
     418:	9b 83       	std	Y+3, r25	; 0x03
     41a:	8a 83       	std	Y+2, r24	; 0x02
     41c:	80 81       	ld	r24, Z
     41e:	91 81       	ldd	r25, Z+1	; 0x01
     420:	99 83       	std	Y+1, r25	; 0x01
     422:	88 83       	st	Y, r24
     424:	d7 cf       	rjmp	.-82     	; 0x3d4 <memory_insertFreeBlock+0x42>

00000426 <memory_heapInit>:
		heapSize -= heapAddress - (size_t)kHeapRegion;
	}

	heapAligned = (byte*)heapAddress;

	kHeapStart.next = (void*)heapAligned;
     426:	ee e7       	ldi	r30, 0x7E	; 126
     428:	f1 e0       	ldi	r31, 0x01	; 1
     42a:	a3 e8       	ldi	r26, 0x83	; 131
     42c:	b1 e0       	ldi	r27, 0x01	; 1
     42e:	b1 83       	std	Z+1, r27	; 0x01
     430:	a0 83       	st	Z, r26
	kHeapStart.blockSize = (size_t)0;
     432:	13 82       	std	Z+3, r1	; 0x03
     434:	12 82       	std	Z+2, r1	; 0x02
	kHeapStart.state = 0;
     436:	14 82       	std	Z+4, r1	; 0x04

	heapAddress = ((size_t)heapAligned) + heapSize;
	heapAddress -= kHeapStructSize;
	heapAddress &= ~((size_t)CFG_PLATFORM_BYTE_ALIGNMENT_MASK);

	kHeapEnd = (void*)heapAddress;
     438:	e2 e4       	ldi	r30, 0x42	; 66
     43a:	fb e0       	ldi	r31, 0x0B	; 11
     43c:	f0 93 7d 01 	sts	0x017D, r31	; 0x80017d <kHeapEnd+0x1>
     440:	e0 93 7c 01 	sts	0x017C, r30	; 0x80017c <kHeapEnd>
	kHeapEnd -> blockSize = 0;
     444:	13 82       	std	Z+3, r1	; 0x03
     446:	12 82       	std	Z+2, r1	; 0x02
	kHeapEnd -> next = NULL;
     448:	11 82       	std	Z+1, r1	; 0x01
     44a:	10 82       	st	Z, r1
	kHeapEnd -> state = 0;
     44c:	14 82       	std	Z+4, r1	; 0x04

	firstFreeBlock = (void*)heapAligned;
	firstFreeBlock -> blockSize = heapAddress - (size_t)firstFreeBlock;
     44e:	8f eb       	ldi	r24, 0xBF	; 191
     450:	99 e0       	ldi	r25, 0x09	; 9
     452:	13 96       	adiw	r26, 0x03	; 3
     454:	9c 93       	st	X, r25
     456:	8e 93       	st	-X, r24
     458:	12 97       	sbiw	r26, 0x02	; 2
	firstFreeBlock -> next = kHeapEnd;
     45a:	11 96       	adiw	r26, 0x01	; 1
     45c:	fc 93       	st	X, r31
     45e:	ee 93       	st	-X, r30
	firstFreeBlock -> state = 0;
     460:	14 96       	adiw	r26, 0x04	; 4
     462:	1c 92       	st	X, r1

	kMinimumFreeMemory = firstFreeBlock -> blockSize;
     464:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <__data_end+0x1>
     468:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <__data_end>
	kFreeMemory = firstFreeBlock -> blockSize;
     46c:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <kFreeMemory+0x1>
     470:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <kFreeMemory>
     474:	08 95       	ret

00000476 <memory_heapAlloc>:

	return;
}

void* memory_heapAlloc(size_t size)
{
     476:	ef 92       	push	r14
     478:	ff 92       	push	r15
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
	void* returnAddress = NULL;
	struct kMemoryBlockStruct_t *block, *newBlock, *previousBlock;

	arch_enterCriticalSection();
     482:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     486:	f8 94       	cli
     488:	0f 92       	push	r0

	if (size > 0 && (size & CFG_PLATFORM_BYTE_ALIGNMENT_MASK) != 0x00) { //-V560
		size += (CFG_PLATFORM_BYTE_ALIGNMENT - (size & CFG_PLATFORM_BYTE_ALIGNMENT_MASK));
	}

	if (size > 0) size += kHeapStructSize;
     48a:	00 97       	sbiw	r24, 0x00	; 0
     48c:	09 f4       	brne	.+2      	; 0x490 <memory_heapAlloc+0x1a>
     48e:	53 c0       	rjmp	.+166    	; 0x536 <memory_heapAlloc+0xc0>
     490:	bc 01       	movw	r22, r24
     492:	6b 5f       	subi	r22, 0xFB	; 251
     494:	7f 4f       	sbci	r23, 0xFF	; 255

	if (size > 0 && size <= kFreeMemory) {
     496:	09 f4       	brne	.+2      	; 0x49a <memory_heapAlloc+0x24>
     498:	4e c0       	rjmp	.+156    	; 0x536 <memory_heapAlloc+0xc0>
     49a:	00 91 7a 01 	lds	r16, 0x017A	; 0x80017a <kFreeMemory>
     49e:	10 91 7b 01 	lds	r17, 0x017B	; 0x80017b <kFreeMemory+0x1>
     4a2:	06 17       	cp	r16, r22
     4a4:	17 07       	cpc	r17, r23
     4a6:	08 f4       	brcc	.+2      	; 0x4aa <memory_heapAlloc+0x34>
     4a8:	46 c0       	rjmp	.+140    	; 0x536 <memory_heapAlloc+0xc0>
		previousBlock = &kHeapStart;
		block = kHeapStart.next;
     4aa:	c0 91 7e 01 	lds	r28, 0x017E	; 0x80017e <kHeapStart>
     4ae:	d0 91 7f 01 	lds	r29, 0x017F	; 0x80017f <kHeapStart+0x1>
	}

	if (size > 0) size += kHeapStructSize;

	if (size > 0 && size <= kFreeMemory) {
		previousBlock = &kHeapStart;
     4b2:	ee e7       	ldi	r30, 0x7E	; 126
     4b4:	f1 e0       	ldi	r31, 0x01	; 1
		block = kHeapStart.next;

		while ((block -> blockSize < size) && (block -> next != NULL)) {
     4b6:	07 c0       	rjmp	.+14     	; 0x4c6 <memory_heapAlloc+0x50>
     4b8:	28 81       	ld	r18, Y
     4ba:	39 81       	ldd	r19, Y+1	; 0x01
     4bc:	21 15       	cp	r18, r1
     4be:	31 05       	cpc	r19, r1
     4c0:	39 f0       	breq	.+14     	; 0x4d0 <memory_heapAlloc+0x5a>
     4c2:	fe 01       	movw	r30, r28
     4c4:	e9 01       	movw	r28, r18
     4c6:	4a 81       	ldd	r20, Y+2	; 0x02
     4c8:	5b 81       	ldd	r21, Y+3	; 0x03
     4ca:	46 17       	cp	r20, r22
     4cc:	57 07       	cpc	r21, r23
     4ce:	a0 f3       	brcs	.-24     	; 0x4b8 <memory_heapAlloc+0x42>
			previousBlock = block;
			block = block -> next;
		}

		if (block != kHeapEnd) {
     4d0:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <kHeapEnd>
     4d4:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <kHeapEnd+0x1>
     4d8:	c8 17       	cp	r28, r24
     4da:	d9 07       	cpc	r29, r25
     4dc:	61 f1       	breq	.+88     	; 0x536 <memory_heapAlloc+0xc0>
			returnAddress = (void*)(((byte*)previousBlock -> next) + kHeapStructSize); //Parenthesis hell
     4de:	e0 80       	ld	r14, Z
     4e0:	f1 80       	ldd	r15, Z+1	; 0x01
     4e2:	85 e0       	ldi	r24, 0x05	; 5
     4e4:	e8 0e       	add	r14, r24
     4e6:	f1 1c       	adc	r15, r1

			previousBlock -> next = block -> next;
     4e8:	88 81       	ld	r24, Y
     4ea:	99 81       	ldd	r25, Y+1	; 0x01
     4ec:	91 83       	std	Z+1, r25	; 0x01
     4ee:	80 83       	st	Z, r24

			if ((block -> blockSize - size) > CFG_MIN_BLOCK_SIZE) {
     4f0:	9a 01       	movw	r18, r20
     4f2:	26 1b       	sub	r18, r22
     4f4:	37 0b       	sbc	r19, r23
     4f6:	25 30       	cpi	r18, 0x05	; 5
     4f8:	31 05       	cpc	r19, r1
     4fa:	28 f5       	brcc	.+74     	; 0x546 <memory_heapAlloc+0xd0>
				block -> blockSize = size;

				memory_insertFreeBlock(newBlock);
			}

			kFreeMemory -= block -> blockSize;
     4fc:	04 1b       	sub	r16, r20
     4fe:	15 0b       	sbc	r17, r21
     500:	10 93 7b 01 	sts	0x017B, r17	; 0x80017b <kFreeMemory+0x1>
     504:	00 93 7a 01 	sts	0x017A, r16	; 0x80017a <kFreeMemory>

			if(kFreeMemory < kMinimumFreeMemory) {
     508:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <__data_end>
     50c:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <__data_end+0x1>
     510:	08 17       	cp	r16, r24
     512:	19 07       	cpc	r17, r25
     514:	98 f0       	brcs	.+38     	; 0x53c <memory_heapAlloc+0xc6>
				kMinimumFreeMemory = kFreeMemory;
			}

			block -> state = 1;
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	8c 83       	std	Y+4, r24	; 0x04
			block -> next = NULL;
     51a:	19 82       	std	Y+1, r1	; 0x01
     51c:	18 82       	st	Y, r1
		}
	}

	arch_exitCriticalSection();
     51e:	0f 90       	pop	r0
     520:	78 94       	sei
     522:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
	return returnAddress;
}
     526:	c7 01       	movw	r24, r14
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	1f 91       	pop	r17
     52e:	0f 91       	pop	r16
     530:	ff 90       	pop	r15
     532:	ef 90       	pop	r14
     534:	08 95       	ret
	return;
}

void* memory_heapAlloc(size_t size)
{
	void* returnAddress = NULL;
     536:	e1 2c       	mov	r14, r1
     538:	f1 2c       	mov	r15, r1
     53a:	f1 cf       	rjmp	.-30     	; 0x51e <memory_heapAlloc+0xa8>
			}

			kFreeMemory -= block -> blockSize;

			if(kFreeMemory < kMinimumFreeMemory) {
				kMinimumFreeMemory = kFreeMemory;
     53c:	10 93 79 01 	sts	0x0179, r17	; 0x800179 <__data_end+0x1>
     540:	00 93 78 01 	sts	0x0178, r16	; 0x800178 <__data_end>
     544:	e8 cf       	rjmp	.-48     	; 0x516 <memory_heapAlloc+0xa0>
			returnAddress = (void*)(((byte*)previousBlock -> next) + kHeapStructSize); //Parenthesis hell

			previousBlock -> next = block -> next;

			if ((block -> blockSize - size) > CFG_MIN_BLOCK_SIZE) {
				newBlock = (void*)(((byte*)block) + size);
     546:	ce 01       	movw	r24, r28
     548:	86 0f       	add	r24, r22
     54a:	97 1f       	adc	r25, r23

				newBlock -> blockSize = block -> blockSize - size;
     54c:	fc 01       	movw	r30, r24
     54e:	33 83       	std	Z+3, r19	; 0x03
     550:	22 83       	std	Z+2, r18	; 0x02
				block -> blockSize = size;
     552:	7b 83       	std	Y+3, r23	; 0x03
     554:	6a 83       	std	Y+2, r22	; 0x02

				memory_insertFreeBlock(newBlock);
     556:	1d df       	rcall	.-454    	; 0x392 <memory_insertFreeBlock>
     558:	4a 81       	ldd	r20, Y+2	; 0x02
     55a:	5b 81       	ldd	r21, Y+3	; 0x03
     55c:	cf cf       	rjmp	.-98     	; 0x4fc <memory_heapAlloc+0x86>

0000055e <memory_heapFree>:
void memory_heapFree(void* pointer)
{
	byte* pointer_casted = (byte*)pointer;
	struct kMemoryBlockStruct_t* block;

	arch_enterCriticalSection();
     55e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     562:	f8 94       	cli
     564:	0f 92       	push	r0
}

kReturnValue_t memory_heapPointerSanityCheck(void* pointer)
{
	kReturnValue_t exitcode = KRESULT_ERR_MEMORY_VIOLATION;
	if (pointer != NULL) {
     566:	00 97       	sbiw	r24, 0x00	; 0
     568:	91 f0       	breq	.+36     	; 0x58e <memory_heapFree+0x30>
		if (pointer >= (void*)kHeapRegion) {
     56a:	21 e0       	ldi	r18, 0x01	; 1
     56c:	83 38       	cpi	r24, 0x83	; 131
     56e:	92 07       	cpc	r25, r18
     570:	70 f0       	brcs	.+28     	; 0x58e <memory_heapFree+0x30>
			if (pointer <= (void*)(kHeapRegion + CFG_HEAP_SIZE-1)) {
     572:	2b e0       	ldi	r18, 0x0B	; 11
     574:	86 34       	cpi	r24, 0x46	; 70
     576:	92 07       	cpc	r25, r18
     578:	09 f0       	breq	.+2      	; 0x57c <memory_heapFree+0x1e>
     57a:	48 f4       	brcc	.+18     	; 0x58e <memory_heapFree+0x30>

	if (memory_heapPointerSanityCheck(pointer) == KRESULT_SUCCESS) {
		pointer_casted -= kHeapStructSize;

		block = (void*)pointer_casted;
		if (block -> state != 0) {
     57c:	fc 01       	movw	r30, r24
     57e:	35 97       	sbiw	r30, 0x05	; 5
     580:	84 81       	ldd	r24, Z+4	; 0x04
     582:	88 23       	and	r24, r24
     584:	21 f0       	breq	.+8      	; 0x58e <memory_heapFree+0x30>
			if (block -> next == NULL) {
     586:	80 81       	ld	r24, Z
     588:	91 81       	ldd	r25, Z+1	; 0x01
     58a:	89 2b       	or	r24, r25
     58c:	29 f0       	breq	.+10     	; 0x598 <memory_heapFree+0x3a>
				memory_insertFreeBlock((struct kMemoryBlockStruct_t*)block);
			}
		}
	}

	arch_exitCriticalSection();
     58e:	0f 90       	pop	r0
     590:	78 94       	sei
     592:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
	return;
     596:	08 95       	ret
		pointer_casted -= kHeapStructSize;

		block = (void*)pointer_casted;
		if (block -> state != 0) {
			if (block -> next == NULL) {
				block -> state = 0;
     598:	14 82       	std	Z+4, r1	; 0x04
				kFreeMemory += block -> blockSize;
     59a:	20 91 7a 01 	lds	r18, 0x017A	; 0x80017a <kFreeMemory>
     59e:	30 91 7b 01 	lds	r19, 0x017B	; 0x80017b <kFreeMemory+0x1>
     5a2:	82 81       	ldd	r24, Z+2	; 0x02
     5a4:	93 81       	ldd	r25, Z+3	; 0x03
     5a6:	82 0f       	add	r24, r18
     5a8:	93 1f       	adc	r25, r19
     5aa:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <kFreeMemory+0x1>
     5ae:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <kFreeMemory>
				memory_insertFreeBlock((struct kMemoryBlockStruct_t*)block);
     5b2:	cf 01       	movw	r24, r30
     5b4:	ee de       	rcall	.-548    	; 0x392 <memory_insertFreeBlock>
     5b6:	eb cf       	rjmp	.-42     	; 0x58e <memory_heapFree+0x30>

000005b8 <idle0>:
	}
}

kReturnValue_t tasks_setTaskPriority(kTaskHandle_t task, kBaseType_t priority)
{
	kReturnValue_t kresult = KRESULT_ERR_NULLPTR;
     5b8:	ff cf       	rjmp	.-2      	; 0x5b8 <idle0>

000005ba <tasks_setTaskState>:
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	00 97       	sbiw	r24, 0x00	; 0
     5c2:	61 f0       	breq	.+24     	; 0x5dc <tasks_setTaskState+0x22>
     5c4:	16 2f       	mov	r17, r22
     5c6:	ec 01       	movw	r28, r24
     5c8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     5cc:	f8 94       	cli
     5ce:	0f 92       	push	r0
     5d0:	32 d1       	rcall	.+612    	; 0x836 <tasks_updateSchedulingList>
     5d2:	1a 87       	std	Y+10, r17	; 0x0a
     5d4:	0f 90       	pop	r0
     5d6:	78 94       	sei
     5d8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	1f 91       	pop	r17
     5e2:	08 95       	ret

000005e4 <tasks_createTaskStatic>:

	return kresult;
}

kReturnValue_t tasks_createTaskStatic(kStackPtr_t taskMemory, kTaskHandle_t* handle, kTask_t entry, void* args, kStackSize_t stackSize, kBaseType_t priority, kTaskType_t type, char* name)
{
     5e4:	2f 92       	push	r2
     5e6:	3f 92       	push	r3
     5e8:	4f 92       	push	r4
     5ea:	5f 92       	push	r5
     5ec:	6f 92       	push	r6
     5ee:	7f 92       	push	r7
     5f0:	8f 92       	push	r8
     5f2:	9f 92       	push	r9
     5f4:	af 92       	push	r10
     5f6:	bf 92       	push	r11
     5f8:	cf 92       	push	r12
     5fa:	ef 92       	push	r14
     5fc:	0f 93       	push	r16
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	ec 01       	movw	r28, r24
     606:	2b 01       	movw	r4, r22
     608:	4a 01       	movw	r8, r20
     60a:	39 01       	movw	r6, r18
	kReturnValue_t kresult = KRESULT_ERR_GENERIC;

	arch_spinlockAcquire(&kTaskOpSpinlock);
     60c:	87 e4       	ldi	r24, 0x47	; 71
     60e:	9b e0       	ldi	r25, 0x0B	; 11
     610:	d5 d2       	rcall	.+1450   	; 0xbbc <arch_spinlockAcquire>

	if (entry != NULL) {
     612:	81 14       	cp	r8, r1
     614:	91 04       	cpc	r9, r1
     616:	09 f4       	brne	.+2      	; 0x61a <tasks_createTaskStatic+0x36>
     618:	59 c0       	rjmp	.+178    	; 0x6cc <tasks_createTaskStatic+0xe8>
		if (taskMemory != NULL) {
     61a:	20 97       	sbiw	r28, 0x00	; 0
     61c:	09 f4       	brne	.+2      	; 0x620 <tasks_createTaskStatic+0x3c>
     61e:	53 c0       	rjmp	.+166    	; 0x6c6 <tasks_createTaskStatic+0xe2>
			((kTaskHandle_t)taskMemory)->activeTaskListItem.data = taskMemory;
     620:	d8 a3       	std	Y+32, r29	; 0x20
     622:	cf 8f       	std	Y+31, r28	; 0x1f
				#else
					memory_prepareProtectionRegion((void*)(stackInitialPtr + stackSize), CFG_STACK_SAFETY_MARGIN);
				#endif
			#endif

			((kTaskHandle_t)taskMemory)->stackPtr = arch_prepareStackFrame(stackInitialPtr, stackSize, entry, args);
     624:	93 01       	movw	r18, r6
     626:	a4 01       	movw	r20, r8
     628:	b8 01       	movw	r22, r16
     62a:	1e 01       	movw	r2, r28
     62c:	89 e2       	ldi	r24, 0x29	; 41
     62e:	28 0e       	add	r2, r24
     630:	31 1c       	adc	r3, r1
     632:	c1 01       	movw	r24, r2
     634:	e8 d2       	rcall	.+1488   	; 0xc06 <arch_prepareStackFrame>
     636:	99 83       	std	Y+1, r25	; 0x01
     638:	88 83       	st	Y, r24
			((kTaskHandle_t)taskMemory)->stackBegin = stackInitialPtr;
     63a:	3b 82       	std	Y+3, r3	; 0x03
     63c:	2a 82       	std	Y+2, r2	; 0x02
			((kTaskHandle_t)taskMemory)->stackSize = stackSize;
     63e:	1d 83       	std	Y+5, r17	; 0x05
     640:	0c 83       	std	Y+4, r16	; 0x04
			((kTaskHandle_t)taskMemory)->entry = entry;
     642:	9f 82       	std	Y+7, r9	; 0x07
     644:	8e 82       	std	Y+6, r8	; 0x06
			((kTaskHandle_t)taskMemory)->args = args;
     646:	79 86       	std	Y+9, r7	; 0x09
     648:	68 86       	std	Y+8, r6	; 0x08
			((kTaskHandle_t)taskMemory)->type = type;
     64a:	cd 86       	std	Y+13, r12	; 0x0d
			((kTaskHandle_t)taskMemory)->pid = kGlobalPid;
     64c:	80 91 48 0b 	lds	r24, 0x0B48	; 0x800b48 <kGlobalPid>
     650:	90 91 49 0b 	lds	r25, 0x0B49	; 0x800b49 <kGlobalPid+0x1>
     654:	99 8b       	std	Y+17, r25	; 0x11
     656:	88 8b       	std	Y+16, r24	; 0x10
			((kTaskHandle_t)taskMemory)->name = name;
     658:	bb 8a       	std	Y+19, r11	; 0x13
     65a:	aa 8a       	std	Y+18, r10	; 0x12
			((kTaskHandle_t)taskMemory)->activeLock = NULL;
     65c:	1d 8a       	std	Y+21, r1	; 0x15
     65e:	1c 8a       	std	Y+20, r1	; 0x14

			if (priority < CFG_NUMBER_OF_PRIORITIES) {
     660:	e7 e0       	ldi	r30, 0x07	; 7
     662:	ee 15       	cp	r30, r14
     664:	58 f5       	brcc	.+86     	; 0x6bc <tasks_createTaskStatic+0xd8>
				((kTaskHandle_t)taskMemory)->priority = priority;
			}
			else {
				((kTaskHandle_t)taskMemory)->priority = CFG_NUMBER_OF_PRIORITIES-1;
     666:	87 e0       	ldi	r24, 0x07	; 7
     668:	8e 87       	std	Y+14, r24	; 0x0e
			}

			tasks_setTaskState((kTaskHandle_t)taskMemory, KSTATE_READY);
     66a:	63 e0       	ldi	r22, 0x03	; 3
     66c:	ce 01       	movw	r24, r28
     66e:	a5 df       	rcall	.-182    	; 0x5ba <tasks_setTaskState>

			kGlobalPid++;
     670:	80 91 48 0b 	lds	r24, 0x0B48	; 0x800b48 <kGlobalPid>
     674:	90 91 49 0b 	lds	r25, 0x0B49	; 0x800b49 <kGlobalPid+0x1>
     678:	01 96       	adiw	r24, 0x01	; 1
     67a:	90 93 49 0b 	sts	0x0B49, r25	; 0x800b49 <kGlobalPid+0x1>
     67e:	80 93 48 0b 	sts	0x0B48, r24	; 0x800b48 <kGlobalPid>
			kresult = KRESULT_SUCCESS;

			if (handle != NULL) {
     682:	41 14       	cp	r4, r1
     684:	51 04       	cpc	r5, r1
     686:	e1 f0       	breq	.+56     	; 0x6c0 <tasks_createTaskStatic+0xdc>
				*handle = (kTaskHandle_t)taskMemory;
     688:	f2 01       	movw	r30, r4
     68a:	d1 83       	std	Z+1, r29	; 0x01
     68c:	c0 83       	st	Z, r28
			}

			tasks_setTaskState((kTaskHandle_t)taskMemory, KSTATE_READY);

			kGlobalPid++;
			kresult = KRESULT_SUCCESS;
     68e:	c0 e0       	ldi	r28, 0x00	; 0
		else {
			kresult = KRESULT_ERR_NULLPTR;
		}
	}

	arch_spinlockRelease(&kTaskOpSpinlock);
     690:	d0 e0       	ldi	r29, 0x00	; 0
     692:	87 e4       	ldi	r24, 0x47	; 71
     694:	9b e0       	ldi	r25, 0x0B	; 11
     696:	ac d2       	rcall	.+1368   	; 0xbf0 <arch_spinlockRelease>
	return kresult;
}
     698:	ce 01       	movw	r24, r28
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	1f 91       	pop	r17
     6a0:	0f 91       	pop	r16
     6a2:	ef 90       	pop	r14
     6a4:	cf 90       	pop	r12
     6a6:	bf 90       	pop	r11
     6a8:	af 90       	pop	r10
     6aa:	9f 90       	pop	r9
     6ac:	8f 90       	pop	r8
     6ae:	7f 90       	pop	r7
     6b0:	6f 90       	pop	r6
     6b2:	5f 90       	pop	r5
     6b4:	4f 90       	pop	r4
     6b6:	3f 90       	pop	r3
     6b8:	2f 90       	pop	r2
     6ba:	08 95       	ret
			((kTaskHandle_t)taskMemory)->pid = kGlobalPid;
			((kTaskHandle_t)taskMemory)->name = name;
			((kTaskHandle_t)taskMemory)->activeLock = NULL;

			if (priority < CFG_NUMBER_OF_PRIORITIES) {
				((kTaskHandle_t)taskMemory)->priority = priority;
     6bc:	ee 86       	std	Y+14, r14	; 0x0e
     6be:	d5 cf       	rjmp	.-86     	; 0x66a <tasks_createTaskStatic+0x86>
			}

			tasks_setTaskState((kTaskHandle_t)taskMemory, KSTATE_READY);

			kGlobalPid++;
			kresult = KRESULT_SUCCESS;
     6c0:	c0 e0       	ldi	r28, 0x00	; 0
     6c2:	d0 e0       	ldi	r29, 0x00	; 0
     6c4:	e6 cf       	rjmp	.-52     	; 0x692 <tasks_createTaskStatic+0xae>
			if (handle != NULL) {
				*handle = (kTaskHandle_t)taskMemory;
			}
		}
		else {
			kresult = KRESULT_ERR_NULLPTR;
     6c6:	ce ef       	ldi	r28, 0xFE	; 254
     6c8:	df ef       	ldi	r29, 0xFF	; 255
     6ca:	e3 cf       	rjmp	.-58     	; 0x692 <tasks_createTaskStatic+0xae>
	return kresult;
}

kReturnValue_t tasks_createTaskStatic(kStackPtr_t taskMemory, kTaskHandle_t* handle, kTask_t entry, void* args, kStackSize_t stackSize, kBaseType_t priority, kTaskType_t type, char* name)
{
	kReturnValue_t kresult = KRESULT_ERR_GENERIC;
     6cc:	cf ef       	ldi	r28, 0xFF	; 255
     6ce:	df ef       	ldi	r29, 0xFF	; 255
     6d0:	e0 cf       	rjmp	.-64     	; 0x692 <tasks_createTaskStatic+0xae>

000006d2 <tasks_init>:
		;
	}
}

kReturnValue_t tasks_init()
{
     6d2:	af 92       	push	r10
     6d4:	bf 92       	push	r11
     6d6:	cf 92       	push	r12
     6d8:	ef 92       	push	r14
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	00 d0       	rcall	.+0      	; 0x6e4 <tasks_init+0x12>
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
	memory_heapInit();
     6e8:	9e de       	rcall	.-708    	; 0x426 <memory_heapInit>
	kTaskHandle_t idleTask;
	tasks_createTaskStatic(kIdleMem, &idleTask, idle0, NULL, 64, 0, KTASK_CRITICAL_STATIC, "idle");
     6ea:	88 e1       	ldi	r24, 0x18	; 24
     6ec:	a8 2e       	mov	r10, r24
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	b8 2e       	mov	r11, r24
     6f2:	92 e0       	ldi	r25, 0x02	; 2
     6f4:	c9 2e       	mov	r12, r25
     6f6:	e1 2c       	mov	r14, r1
     6f8:	00 e4       	ldi	r16, 0x40	; 64
     6fa:	10 e0       	ldi	r17, 0x00	; 0
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	4c ed       	ldi	r20, 0xDC	; 220
     702:	52 e0       	ldi	r21, 0x02	; 2
     704:	be 01       	movw	r22, r28
     706:	6f 5f       	subi	r22, 0xFF	; 255
     708:	7f 4f       	sbci	r23, 0xFF	; 255
     70a:	8a e4       	ldi	r24, 0x4A	; 74
     70c:	9b e0       	ldi	r25, 0x0B	; 11
     70e:	6a df       	rcall	.-300    	; 0x5e4 <tasks_createTaskStatic>

	if (idleTask == NULL) {
     710:	89 81       	ldd	r24, Y+1	; 0x01
     712:	9a 81       	ldd	r25, Y+2	; 0x02
     714:	00 97       	sbiw	r24, 0x00	; 0
		//debug_logMessage(PGM_PUTS, L_FATAL, PSTR("\r\ntaskmgr: Startup failed, could not create idle task.\r\n"));
		while(1);
	}

	tasks_initScheduler(idleTask);
     716:	a1 f0       	breq	.+40     	; 0x740 <tasks_init+0x6e>
	tasks_setCurrentTask(idleTask);
     718:	86 d0       	rcall	.+268    	; 0x826 <tasks_initScheduler>
     71a:	89 81       	ldd	r24, Y+1	; 0x01
     71c:	9a 81       	ldd	r25, Y+2	; 0x02
	tasks_setNextTask(idleTask);
     71e:	57 d0       	rcall	.+174    	; 0x7ce <tasks_setCurrentTask>
     720:	89 81       	ldd	r24, Y+1	; 0x01
     722:	9a 81       	ldd	r25, Y+2	; 0x02
     724:	59 d0       	rcall	.+178    	; 0x7d8 <tasks_setNextTask>

	return 0;
}
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	0f 90       	pop	r0
     72c:	0f 90       	pop	r0
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	ef 90       	pop	r14
     738:	cf 90       	pop	r12
     73a:	bf 90       	pop	r11
     73c:	af 90       	pop	r10
     73e:	08 95       	ret
     740:	ff cf       	rjmp	.-2      	; 0x740 <tasks_init+0x6e>

00000742 <tasks_createTaskDynamic>:
	arch_spinlockRelease(&kTaskOpSpinlock);
	return kresult;
}

kReturnValue_t tasks_createTaskDynamic(kTaskHandle_t* handle, kTask_t entry, void* args, kStackSize_t stackSize, kBaseType_t priority, kTaskType_t type, char* name)
{
     742:	2f 92       	push	r2
     744:	3f 92       	push	r3
     746:	4f 92       	push	r4
     748:	5f 92       	push	r5
     74a:	6f 92       	push	r6
     74c:	7f 92       	push	r7
     74e:	8f 92       	push	r8
     750:	9f 92       	push	r9
     752:	af 92       	push	r10
     754:	bf 92       	push	r11
     756:	cf 92       	push	r12
     758:	df 92       	push	r13
     75a:	ef 92       	push	r14
     75c:	0f 93       	push	r16
     75e:	1f 93       	push	r17
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	1c 01       	movw	r2, r24
     766:	4b 01       	movw	r8, r22
     768:	3a 01       	movw	r6, r20
     76a:	e9 01       	movw	r28, r18
	kReturnValue_t kresult = KRESULT_ERR_GENERIC;

	if (stackSize < CFG_MIN_TASK_STACK_SIZE) {
     76c:	2c 33       	cpi	r18, 0x3C	; 60
     76e:	31 05       	cpc	r19, r1
     770:	30 f1       	brcs	.+76     	; 0x7be <tasks_createTaskDynamic+0x7c>
     772:	c9 01       	movw	r24, r18
     774:	89 96       	adiw	r24, 0x29	; 41

	#if CFG_MEMORY_PROTECTION_MODE == 2 || CFG_MEMORY_PROTECTION_MODE == 3
		allocationSize += CFG_STACK_SAFETY_MARGIN;
	#endif

	kStackPtr_t stackPointer = (kStackPtr_t)memory_heapAlloc(allocationSize);
     776:	7f de       	rcall	.-770    	; 0x476 <memory_heapAlloc>
     778:	2c 01       	movw	r4, r24
	kresult = tasks_createTaskStatic(stackPointer, NULL, entry, args, stackSize, priority, type, name);
     77a:	56 01       	movw	r10, r12
     77c:	ce 2c       	mov	r12, r14
     77e:	e0 2e       	mov	r14, r16
     780:	8e 01       	movw	r16, r28
     782:	93 01       	movw	r18, r6
     784:	a4 01       	movw	r20, r8
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	2c df       	rcall	.-424    	; 0x5e4 <tasks_createTaskStatic>
     78c:	ec 01       	movw	r28, r24

	if (kresult != KRESULT_SUCCESS) {
     78e:	89 2b       	or	r24, r25
     790:	d9 f4       	brne	.+54     	; 0x7c8 <tasks_createTaskDynamic+0x86>
		memory_heapFree((void*)stackPointer);
	}
	else {
		*handle = (kTaskHandle_t)(stackPointer);
     792:	f1 01       	movw	r30, r2
     794:	51 82       	std	Z+1, r5	; 0x01
     796:	40 82       	st	Z, r4
	}

	return kresult;
}
     798:	ce 01       	movw	r24, r28
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	ef 90       	pop	r14
     7a4:	df 90       	pop	r13
     7a6:	cf 90       	pop	r12
     7a8:	bf 90       	pop	r11
     7aa:	af 90       	pop	r10
     7ac:	9f 90       	pop	r9
     7ae:	8f 90       	pop	r8
     7b0:	7f 90       	pop	r7
     7b2:	6f 90       	pop	r6
     7b4:	5f 90       	pop	r5
     7b6:	4f 90       	pop	r4
     7b8:	3f 90       	pop	r3
     7ba:	2f 90       	pop	r2
     7bc:	08 95       	ret
     7be:	85 e6       	ldi	r24, 0x65	; 101
     7c0:	90 e0       	ldi	r25, 0x00	; 0
kReturnValue_t tasks_createTaskDynamic(kTaskHandle_t* handle, kTask_t entry, void* args, kStackSize_t stackSize, kBaseType_t priority, kTaskType_t type, char* name)
{
	kReturnValue_t kresult = KRESULT_ERR_GENERIC;

	if (stackSize < CFG_MIN_TASK_STACK_SIZE) {
		stackSize = CFG_MIN_TASK_STACK_SIZE;
     7c2:	cc e3       	ldi	r28, 0x3C	; 60
     7c4:	d0 e0       	ldi	r29, 0x00	; 0

	kStackPtr_t stackPointer = (kStackPtr_t)memory_heapAlloc(allocationSize);
	kresult = tasks_createTaskStatic(stackPointer, NULL, entry, args, stackSize, priority, type, name);

	if (kresult != KRESULT_SUCCESS) {
		memory_heapFree((void*)stackPointer);
     7c6:	d7 cf       	rjmp	.-82     	; 0x776 <tasks_createTaskDynamic+0x34>
     7c8:	c2 01       	movw	r24, r4
     7ca:	c9 de       	rcall	.-622    	; 0x55e <memory_heapFree>
     7cc:	e5 cf       	rjmp	.-54     	; 0x798 <tasks_createTaskDynamic+0x56>

000007ce <tasks_setCurrentTask>:
	if (sleep != 0) {
		tasks_setTaskState(kSchedCPUState.kCurrentTask, KSTATE_SLEEPING);
		kSchedCPUState.kCurrentTask->sleepTime = sleep;
	}
	arch_yield();
}
     7ce:	90 93 e1 0b 	sts	0x0BE1, r25	; 0x800be1 <kSchedCPUState+0x1>
     7d2:	80 93 e0 0b 	sts	0x0BE0, r24	; 0x800be0 <kSchedCPUState>
     7d6:	08 95       	ret

000007d8 <tasks_setNextTask>:
     7d8:	90 93 e3 0b 	sts	0x0BE3, r25	; 0x800be3 <kSchedCPUState+0x3>
     7dc:	80 93 e2 0b 	sts	0x0BE2, r24	; 0x800be2 <kSchedCPUState+0x2>
     7e0:	08 95       	ret

000007e2 <tasks_switchTask>:

void tasks_switchTask()
{
	tasks_runScheduler();
     7e2:	67 d0       	rcall	.+206    	; 0x8b2 <tasks_runScheduler>
	if (kSchedCPUState.kNextTask != kSchedCPUState.kCurrentTask) tasks_switchContext();
     7e4:	80 91 e2 0b 	lds	r24, 0x0BE2	; 0x800be2 <kSchedCPUState+0x2>
     7e8:	90 91 e3 0b 	lds	r25, 0x0BE3	; 0x800be3 <kSchedCPUState+0x3>
     7ec:	20 91 e0 0b 	lds	r18, 0x0BE0	; 0x800be0 <kSchedCPUState>
     7f0:	30 91 e1 0b 	lds	r19, 0x0BE1	; 0x800be1 <kSchedCPUState+0x1>
     7f4:	82 17       	cp	r24, r18
     7f6:	93 07       	cpc	r25, r19
     7f8:	21 f0       	breq	.+8      	; 0x802 <tasks_switchTask+0x20>
	#if CFG_MEMORY_PROTECTION_MODE != 0
	if (memory_pointerSanityCheck((void*)kNextTask) != 0) {
		kernel_panic(PSTR("Memory access violation in task manager: kNextTask is out of bounds\r\n"));
	}
	#endif*/
	kSchedCPUState.kCurrentTask = kSchedCPUState.kNextTask;
     7fa:	90 93 e1 0b 	sts	0x0BE1, r25	; 0x800be1 <kSchedCPUState+0x1>
     7fe:	80 93 e0 0b 	sts	0x0BE0, r24	; 0x800be0 <kSchedCPUState>
     802:	08 95       	ret

00000804 <tasks_tick>:
	arch_yield();
}

void tasks_switchTask()
{
	tasks_runScheduler();
     804:	56 d0       	rcall	.+172    	; 0x8b2 <tasks_runScheduler>
	if (kSchedCPUState.kNextTask != kSchedCPUState.kCurrentTask) tasks_switchContext();
     806:	80 91 e2 0b 	lds	r24, 0x0BE2	; 0x800be2 <kSchedCPUState+0x2>
     80a:	90 91 e3 0b 	lds	r25, 0x0BE3	; 0x800be3 <kSchedCPUState+0x3>
     80e:	20 91 e0 0b 	lds	r18, 0x0BE0	; 0x800be0 <kSchedCPUState>
     812:	30 91 e1 0b 	lds	r19, 0x0BE1	; 0x800be1 <kSchedCPUState+0x1>
     816:	82 17       	cp	r24, r18
     818:	93 07       	cpc	r25, r19
     81a:	21 f0       	breq	.+8      	; 0x824 <tasks_tick+0x20>
	#if CFG_MEMORY_PROTECTION_MODE != 0
	if (memory_pointerSanityCheck((void*)kNextTask) != 0) {
		kernel_panic(PSTR("Memory access violation in task manager: kNextTask is out of bounds\r\n"));
	}
	#endif*/
	kSchedCPUState.kCurrentTask = kSchedCPUState.kNextTask;
     81c:	90 93 e1 0b 	sts	0x0BE1, r25	; 0x800be1 <kSchedCPUState+0x1>
     820:	80 93 e0 0b 	sts	0x0BE0, r24	; 0x800be0 <kSchedCPUState>
     824:	08 95       	ret

00000826 <tasks_initScheduler>:

struct kSchedCPUStateStruct_t kSchedCPUState;

void tasks_initScheduler(kTaskHandle_t idle)
{
	kSchedCPUState.kReadyTaskList[0].head = &(idle->activeTaskListItem);
     826:	49 96       	adiw	r24, 0x19	; 25
     828:	e0 ee       	ldi	r30, 0xE0	; 224
     82a:	fb e0       	ldi	r31, 0x0B	; 11
     82c:	90 87       	std	Z+8, r25	; 0x08
     82e:	87 83       	std	Z+7, r24	; 0x07
	kSchedCPUState.kReadyTaskList[0].tail = &(idle->activeTaskListItem);
     830:	92 87       	std	Z+10, r25	; 0x0a
     832:	81 87       	std	Z+9, r24	; 0x09
     834:	08 95       	ret

00000836 <tasks_updateSchedulingList>:
}

void tasks_updateSchedulingList(kTaskHandle_t task, kTaskState_t state)
{
     836:	ef 92       	push	r14
     838:	ff 92       	push	r15
     83a:	1f 93       	push	r17
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
	if (task != NULL) {
     840:	00 97       	sbiw	r24, 0x00	; 0
     842:	81 f0       	breq	.+32     	; 0x864 <tasks_updateSchedulingList+0x2e>
     844:	16 2f       	mov	r17, r22
     846:	ec 01       	movw	r28, r24
		common_listDeleteAny(task->activeTaskListItem.list, &(task->activeTaskListItem));
     848:	7c 01       	movw	r14, r24
     84a:	89 e1       	ldi	r24, 0x19	; 25
     84c:	e8 0e       	add	r14, r24
     84e:	f1 1c       	adc	r15, r1
     850:	89 8d       	ldd	r24, Y+25	; 0x19
     852:	9a 8d       	ldd	r25, Y+26	; 0x1a
     854:	b7 01       	movw	r22, r14
     856:	01 d1       	rcall	.+514    	; 0xa5a <common_listDeleteAny>

		switch (state) {
     858:	13 30       	cpi	r17, 0x03	; 3
     85a:	e1 f0       	breq	.+56     	; 0x894 <tasks_updateSchedulingList+0x5e>
     85c:	14 30       	cpi	r17, 0x04	; 4
     85e:	41 f0       	breq	.+16     	; 0x870 <tasks_updateSchedulingList+0x3a>
     860:	11 30       	cpi	r17, 0x01	; 1
     862:	79 f0       	breq	.+30     	; 0x882 <tasks_updateSchedulingList+0x4c>
			default:
				// Do nothing
			break;
		}
	}
}
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	1f 91       	pop	r17
     86a:	ff 90       	pop	r15
     86c:	ef 90       	pop	r14
     86e:	08 95       	ret
		switch (state) {
			case KSTATE_SUSPENDED:
				common_listAddBack(&kSchedCPUState.kSuspendedTaskList, &(task->activeTaskListItem));
			break;
			case KSTATE_SLEEPING:
				common_listAddBack(&kSchedCPUState.kSleepingTaskList, &(task->activeTaskListItem));
     870:	b7 01       	movw	r22, r14
     872:	87 e0       	ldi	r24, 0x07	; 7
     874:	9c e0       	ldi	r25, 0x0C	; 12
			default:
				// Do nothing
			break;
		}
	}
}
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	1f 91       	pop	r17
     87c:	ff 90       	pop	r15
			break;
			case KSTATE_SLEEPING:
				common_listAddBack(&kSchedCPUState.kSleepingTaskList, &(task->activeTaskListItem));
			break;
			case KSTATE_READY:
				common_listAddBack(&kSchedCPUState.kReadyTaskList[task->priority], &(task->activeTaskListItem));
     87e:	ef 90       	pop	r14
     880:	9c c0       	rjmp	.+312    	; 0x9ba <common_listAddBack>
	if (task != NULL) {
		common_listDeleteAny(task->activeTaskListItem.list, &(task->activeTaskListItem));

		switch (state) {
			case KSTATE_SUSPENDED:
				common_listAddBack(&kSchedCPUState.kSuspendedTaskList, &(task->activeTaskListItem));
     882:	b7 01       	movw	r22, r14
     884:	8b e0       	ldi	r24, 0x0B	; 11
     886:	9c e0       	ldi	r25, 0x0C	; 12
			default:
				// Do nothing
			break;
		}
	}
}
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	1f 91       	pop	r17
     88e:	ff 90       	pop	r15
			break;
			case KSTATE_SLEEPING:
				common_listAddBack(&kSchedCPUState.kSleepingTaskList, &(task->activeTaskListItem));
			break;
			case KSTATE_READY:
				common_listAddBack(&kSchedCPUState.kReadyTaskList[task->priority], &(task->activeTaskListItem));
     890:	ef 90       	pop	r14
     892:	93 c0       	rjmp	.+294    	; 0x9ba <common_listAddBack>
     894:	8e 85       	ldd	r24, Y+14	; 0x0e
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	88 0f       	add	r24, r24
     89a:	99 1f       	adc	r25, r25
     89c:	88 0f       	add	r24, r24
     89e:	99 1f       	adc	r25, r25
     8a0:	b7 01       	movw	r22, r14
     8a2:	89 51       	subi	r24, 0x19	; 25
     8a4:	94 4f       	sbci	r25, 0xF4	; 244
			default:
				// Do nothing
			break;
		}
	}
}
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	1f 91       	pop	r17
     8ac:	ff 90       	pop	r15
			break;
			case KSTATE_SLEEPING:
				common_listAddBack(&kSchedCPUState.kSleepingTaskList, &(task->activeTaskListItem));
			break;
			case KSTATE_READY:
				common_listAddBack(&kSchedCPUState.kReadyTaskList[task->priority], &(task->activeTaskListItem));
     8ae:	ef 90       	pop	r14
     8b0:	84 c0       	rjmp	.+264    	; 0x9ba <common_listAddBack>

000008b2 <tasks_runScheduler>:
		}
	}
}

void tasks_runScheduler()
{
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
	if (!kSchedCPUState.kTickRate) {
     8ba:	80 91 e4 0b 	lds	r24, 0x0BE4	; 0x800be4 <kSchedCPUState+0x4>
     8be:	88 23       	and	r24, r24
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <tasks_runScheduler+0x12>
     8c2:	41 c0       	rjmp	.+130    	; 0x946 <tasks_runScheduler+0x94>
		if (kSchedCPUState.kTaskActiveTicks) {
			kSchedCPUState.kTaskActiveTicks--;
		}
	}
	else {
		kSchedCPUState.kTickRate--;
     8c4:	80 91 e4 0b 	lds	r24, 0x0BE4	; 0x800be4 <kSchedCPUState+0x4>
     8c8:	81 50       	subi	r24, 0x01	; 1
     8ca:	80 93 e4 0b 	sts	0x0BE4, r24	; 0x800be4 <kSchedCPUState+0x4>
	}

	if (!kSchedCPUState.kTaskActiveTicks) {
     8ce:	80 91 e5 0b 	lds	r24, 0x0BE5	; 0x800be5 <kSchedCPUState+0x5>
     8d2:	90 91 e6 0b 	lds	r25, 0x0BE6	; 0x800be6 <kSchedCPUState+0x6>
     8d6:	89 2b       	or	r24, r25
     8d8:	29 f0       	breq	.+10     	; 0x8e4 <tasks_runScheduler+0x32>
		tasks_search();
	}
	return;
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	08 95       	ret
     8e4:	27 e0       	ldi	r18, 0x07	; 7
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	03 c0       	rjmp	.+6      	; 0x8f0 <tasks_runScheduler+0x3e>
	}
}

static inline void tasks_search()
{
	for (kIterator_t i = CFG_NUMBER_OF_PRIORITIES-1; i >= 0; i--) {
     8ea:	21 50       	subi	r18, 0x01	; 1
     8ec:	31 09       	sbc	r19, r1
     8ee:	a8 f3       	brcs	.-22     	; 0x8da <tasks_runScheduler+0x28>
		if (kSchedCPUState.kReadyTaskList[i].head != NULL) {
     8f0:	c9 01       	movw	r24, r18
     8f2:	88 0f       	add	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	88 0f       	add	r24, r24
     8f8:	99 1f       	adc	r25, r25
     8fa:	fc 01       	movw	r30, r24
     8fc:	e0 52       	subi	r30, 0x20	; 32
     8fe:	f4 4f       	sbci	r31, 0xF4	; 244
     900:	df 01       	movw	r26, r30
     902:	17 96       	adiw	r26, 0x07	; 7
     904:	47 81       	ldd	r20, Z+7	; 0x07
     906:	50 85       	ldd	r21, Z+8	; 0x08
     908:	45 2b       	or	r20, r21
     90a:	79 f3       	breq	.-34     	; 0x8ea <tasks_runScheduler+0x38>
			kSchedCPUState.kNextTask = kSchedCPUState.kReadyTaskList[i].head->data;
     90c:	ed 91       	ld	r30, X+
     90e:	fc 91       	ld	r31, X
     910:	11 97       	sbiw	r26, 0x01	; 1
     912:	26 81       	ldd	r18, Z+6	; 0x06
     914:	37 81       	ldd	r19, Z+7	; 0x07
     916:	30 93 e3 0b 	sts	0x0BE3, r19	; 0x800be3 <kSchedCPUState+0x3>
     91a:	20 93 e2 0b 	sts	0x0BE2, r18	; 0x800be2 <kSchedCPUState+0x2>
			kSchedCPUState.kTaskActiveTicks = CFG_TICKS_PER_TASK;
     91e:	25 e0       	ldi	r18, 0x05	; 5
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	30 93 e6 0b 	sts	0x0BE6, r19	; 0x800be6 <kSchedCPUState+0x6>
     926:	20 93 e5 0b 	sts	0x0BE5, r18	; 0x800be5 <kSchedCPUState+0x5>

			volatile struct kListItemStruct_t* temp = kSchedCPUState.kReadyTaskList[i].head;
     92a:	0d 91       	ld	r16, X+
     92c:	1c 91       	ld	r17, X
			common_listDropFront(&kSchedCPUState.kReadyTaskList[i]);
     92e:	ec 01       	movw	r28, r24
     930:	c9 51       	subi	r28, 0x19	; 25
     932:	d4 4f       	sbci	r29, 0xF4	; 244
     934:	ce 01       	movw	r24, r28
     936:	6a d0       	rcall	.+212    	; 0xa0c <common_listDropFront>
			common_listAddBack(&kSchedCPUState.kReadyTaskList[i], temp);
     938:	b8 01       	movw	r22, r16
     93a:	ce 01       	movw	r24, r28

	if (!kSchedCPUState.kTaskActiveTicks) {
		tasks_search();
	}
	return;
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	1f 91       	pop	r17
			kSchedCPUState.kNextTask = kSchedCPUState.kReadyTaskList[i].head->data;
			kSchedCPUState.kTaskActiveTicks = CFG_TICKS_PER_TASK;

			volatile struct kListItemStruct_t* temp = kSchedCPUState.kReadyTaskList[i].head;
			common_listDropFront(&kSchedCPUState.kReadyTaskList[i]);
			common_listAddBack(&kSchedCPUState.kReadyTaskList[i], temp);
     942:	0f 91       	pop	r16
     944:	3a c0       	rjmp	.+116    	; 0x9ba <common_listAddBack>
}

//WHAT THE HELL AM I DOING SOMEBODY PLEASE HELP ME
static inline void tasks_tickTasks()
{
	volatile struct kListItemStruct_t* temp = kSchedCPUState.kSleepingTaskList.head;
     946:	c0 91 07 0c 	lds	r28, 0x0C07	; 0x800c07 <kSchedCPUState+0x27>
     94a:	d0 91 08 0c 	lds	r29, 0x0C08	; 0x800c08 <kSchedCPUState+0x28>

	while (temp != NULL) {
     94e:	20 97       	sbiw	r28, 0x00	; 0
     950:	69 f4       	brne	.+26     	; 0x96c <tasks_runScheduler+0xba>
     952:	1f c0       	rjmp	.+62     	; 0x992 <tasks_runScheduler+0xe0>
		if (((kTaskHandle_t)(temp->data))->sleepTime) {
			((kTaskHandle_t)(temp->data))->sleepTime--;
     954:	ee 81       	ldd	r30, Y+6	; 0x06
     956:	ff 81       	ldd	r31, Y+7	; 0x07
     958:	83 85       	ldd	r24, Z+11	; 0x0b
     95a:	94 85       	ldd	r25, Z+12	; 0x0c
     95c:	01 97       	sbiw	r24, 0x01	; 1
     95e:	94 87       	std	Z+12, r25	; 0x0c
     960:	83 87       	std	Z+11, r24	; 0x0b
		}
		else {
			tasks_updateSchedulingList((kTaskHandle_t)temp->data, KSTATE_READY);
			((kTaskHandle_t)(temp->data))->state = KSTATE_READY;
		}
		temp = temp->next;
     962:	0a 80       	ldd	r0, Y+2	; 0x02
     964:	db 81       	ldd	r29, Y+3	; 0x03
     966:	c0 2d       	mov	r28, r0
//WHAT THE HELL AM I DOING SOMEBODY PLEASE HELP ME
static inline void tasks_tickTasks()
{
	volatile struct kListItemStruct_t* temp = kSchedCPUState.kSleepingTaskList.head;

	while (temp != NULL) {
     968:	20 97       	sbiw	r28, 0x00	; 0
     96a:	99 f0       	breq	.+38     	; 0x992 <tasks_runScheduler+0xe0>
		if (((kTaskHandle_t)(temp->data))->sleepTime) {
     96c:	ee 81       	ldd	r30, Y+6	; 0x06
     96e:	ff 81       	ldd	r31, Y+7	; 0x07
     970:	83 85       	ldd	r24, Z+11	; 0x0b
     972:	94 85       	ldd	r25, Z+12	; 0x0c
     974:	89 2b       	or	r24, r25
     976:	71 f7       	brne	.-36     	; 0x954 <tasks_runScheduler+0xa2>
			((kTaskHandle_t)(temp->data))->sleepTime--;
		}
		else {
			tasks_updateSchedulingList((kTaskHandle_t)temp->data, KSTATE_READY);
     978:	8e 81       	ldd	r24, Y+6	; 0x06
     97a:	9f 81       	ldd	r25, Y+7	; 0x07
     97c:	63 e0       	ldi	r22, 0x03	; 3
     97e:	5b df       	rcall	.-330    	; 0x836 <tasks_updateSchedulingList>
			((kTaskHandle_t)(temp->data))->state = KSTATE_READY;
     980:	ee 81       	ldd	r30, Y+6	; 0x06
     982:	ff 81       	ldd	r31, Y+7	; 0x07
     984:	83 e0       	ldi	r24, 0x03	; 3
     986:	82 87       	std	Z+10, r24	; 0x0a
		}
		temp = temp->next;
     988:	0a 80       	ldd	r0, Y+2	; 0x02
     98a:	db 81       	ldd	r29, Y+3	; 0x03
     98c:	c0 2d       	mov	r28, r0
//WHAT THE HELL AM I DOING SOMEBODY PLEASE HELP ME
static inline void tasks_tickTasks()
{
	volatile struct kListItemStruct_t* temp = kSchedCPUState.kSleepingTaskList.head;

	while (temp != NULL) {
     98e:	20 97       	sbiw	r28, 0x00	; 0
     990:	69 f7       	brne	.-38     	; 0x96c <tasks_runScheduler+0xba>

void tasks_runScheduler()
{
	if (!kSchedCPUState.kTickRate) {
		tasks_tickTasks();
		kSchedCPUState.kTickRate = CFG_TICKRATE_MS;
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	80 93 e4 0b 	sts	0x0BE4, r24	; 0x800be4 <kSchedCPUState+0x4>
		if (kSchedCPUState.kTaskActiveTicks) {
     998:	80 91 e5 0b 	lds	r24, 0x0BE5	; 0x800be5 <kSchedCPUState+0x5>
     99c:	90 91 e6 0b 	lds	r25, 0x0BE6	; 0x800be6 <kSchedCPUState+0x6>
     9a0:	89 2b       	or	r24, r25
     9a2:	09 f4       	brne	.+2      	; 0x9a6 <tasks_runScheduler+0xf4>
     9a4:	94 cf       	rjmp	.-216    	; 0x8ce <tasks_runScheduler+0x1c>
			kSchedCPUState.kTaskActiveTicks--;
     9a6:	80 91 e5 0b 	lds	r24, 0x0BE5	; 0x800be5 <kSchedCPUState+0x5>
     9aa:	90 91 e6 0b 	lds	r25, 0x0BE6	; 0x800be6 <kSchedCPUState+0x6>
     9ae:	01 97       	sbiw	r24, 0x01	; 1
     9b0:	90 93 e6 0b 	sts	0x0BE6, r25	; 0x800be6 <kSchedCPUState+0x6>
     9b4:	80 93 e5 0b 	sts	0x0BE5, r24	; 0x800be5 <kSchedCPUState+0x5>
     9b8:	8a cf       	rjmp	.-236    	; 0x8ce <tasks_runScheduler+0x1c>

000009ba <common_listAddBack>:
		}

		list->head = item;

		if (list->tail == NULL) {
			list->tail = item;
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	fc 01       	movw	r30, r24
     9c0:	db 01       	movw	r26, r22
     9c2:	89 2b       	or	r24, r25
     9c4:	e9 f0       	breq	.+58     	; 0xa00 <common_listAddBack+0x46>
     9c6:	10 97       	sbiw	r26, 0x00	; 0
     9c8:	d9 f0       	breq	.+54     	; 0xa00 <common_listAddBack+0x46>
     9ca:	13 96       	adiw	r26, 0x03	; 3
     9cc:	1c 92       	st	X, r1
     9ce:	1e 92       	st	-X, r1
     9d0:	12 97       	sbiw	r26, 0x02	; 2
     9d2:	82 81       	ldd	r24, Z+2	; 0x02
     9d4:	93 81       	ldd	r25, Z+3	; 0x03
     9d6:	15 96       	adiw	r26, 0x05	; 5
     9d8:	9c 93       	st	X, r25
     9da:	8e 93       	st	-X, r24
     9dc:	14 97       	sbiw	r26, 0x04	; 4
     9de:	82 81       	ldd	r24, Z+2	; 0x02
     9e0:	93 81       	ldd	r25, Z+3	; 0x03
     9e2:	89 2b       	or	r24, r25
     9e4:	21 f0       	breq	.+8      	; 0x9ee <common_listAddBack+0x34>
     9e6:	c2 81       	ldd	r28, Z+2	; 0x02
     9e8:	d3 81       	ldd	r29, Z+3	; 0x03
     9ea:	7b 83       	std	Y+3, r23	; 0x03
     9ec:	6a 83       	std	Y+2, r22	; 0x02
     9ee:	b3 83       	std	Z+3, r27	; 0x03
     9f0:	a2 83       	std	Z+2, r26	; 0x02
     9f2:	80 81       	ld	r24, Z
     9f4:	91 81       	ldd	r25, Z+1	; 0x01
     9f6:	89 2b       	or	r24, r25
     9f8:	31 f0       	breq	.+12     	; 0xa06 <common_listAddBack+0x4c>
     9fa:	11 96       	adiw	r26, 0x01	; 1
     9fc:	fc 93       	st	X, r31
     9fe:	ee 93       	st	-X, r30
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	08 95       	ret
     a06:	b1 83       	std	Z+1, r27	; 0x01
     a08:	a0 83       	st	Z, r26
     a0a:	f7 cf       	rjmp	.-18     	; 0x9fa <common_listAddBack+0x40>

00000a0c <common_listDropFront>:
	}
	return;
}

void common_listDropFront(volatile struct kLinkedListStruct_t* list)
{
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
     a10:	fc 01       	movw	r30, r24
	if (list != NULL) {
     a12:	89 2b       	or	r24, r25
     a14:	e1 f0       	breq	.+56     	; 0xa4e <common_listDropFront+0x42>
		if (list->head != NULL) {
     a16:	80 81       	ld	r24, Z
     a18:	91 81       	ldd	r25, Z+1	; 0x01
     a1a:	89 2b       	or	r24, r25
     a1c:	c1 f0       	breq	.+48     	; 0xa4e <common_listDropFront+0x42>
			volatile struct kListItemStruct_t* prev;

			prev = list->head;
     a1e:	a0 81       	ld	r26, Z
     a20:	b1 81       	ldd	r27, Z+1	; 0x01
			list->head = list->head->next;
     a22:	c0 81       	ld	r28, Z
     a24:	d1 81       	ldd	r29, Z+1	; 0x01
     a26:	8a 81       	ldd	r24, Y+2	; 0x02
     a28:	9b 81       	ldd	r25, Y+3	; 0x03
     a2a:	91 83       	std	Z+1, r25	; 0x01
     a2c:	80 83       	st	Z, r24

			if (list->head != NULL) {
     a2e:	80 81       	ld	r24, Z
     a30:	91 81       	ldd	r25, Z+1	; 0x01
     a32:	89 2b       	or	r24, r25
     a34:	21 f0       	breq	.+8      	; 0xa3e <common_listDropFront+0x32>
				list->head->prev = NULL;
     a36:	c0 81       	ld	r28, Z
     a38:	d1 81       	ldd	r29, Z+1	; 0x01
     a3a:	1d 82       	std	Y+5, r1	; 0x05
     a3c:	1c 82       	std	Y+4, r1	; 0x04
			}

			if (prev == list->tail) {
     a3e:	82 81       	ldd	r24, Z+2	; 0x02
     a40:	93 81       	ldd	r25, Z+3	; 0x03
     a42:	a8 17       	cp	r26, r24
     a44:	b9 07       	cpc	r27, r25
     a46:	31 f0       	breq	.+12     	; 0xa54 <common_listDropFront+0x48>
				list->tail = NULL;
			}

			prev->list = NULL;
     a48:	11 96       	adiw	r26, 0x01	; 1
     a4a:	1c 92       	st	X, r1
     a4c:	1e 92       	st	-X, r1
		}
	}
	return;
}
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	08 95       	ret
			if (list->head != NULL) {
				list->head->prev = NULL;
			}

			if (prev == list->tail) {
				list->tail = NULL;
     a54:	13 82       	std	Z+3, r1	; 0x03
     a56:	12 82       	std	Z+2, r1	; 0x02
     a58:	f7 cf       	rjmp	.-18     	; 0xa48 <common_listDropFront+0x3c>

00000a5a <common_listDeleteAny>:
	}
	return;
}

void common_listDeleteAny(volatile struct kLinkedListStruct_t* list, volatile struct kListItemStruct_t* item)
{
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	dc 01       	movw	r26, r24
     a60:	fb 01       	movw	r30, r22
	if (list != NULL && item != NULL) {
     a62:	89 2b       	or	r24, r25
     a64:	51 f1       	breq	.+84     	; 0xaba <common_listDeleteAny+0x60>
     a66:	30 97       	sbiw	r30, 0x00	; 0
     a68:	41 f1       	breq	.+80     	; 0xaba <common_listDeleteAny+0x60>
		if (list->head == item) {
     a6a:	8d 91       	ld	r24, X+
     a6c:	9c 91       	ld	r25, X
     a6e:	11 97       	sbiw	r26, 0x01	; 1
     a70:	68 17       	cp	r22, r24
     a72:	79 07       	cpc	r23, r25
     a74:	29 f1       	breq	.+74     	; 0xac0 <common_listDeleteAny+0x66>
			common_listDropFront(list);
		}
		else {
			if (list->tail == item) {
     a76:	12 96       	adiw	r26, 0x02	; 2
     a78:	8d 91       	ld	r24, X+
     a7a:	9c 91       	ld	r25, X
     a7c:	13 97       	sbiw	r26, 0x03	; 3
     a7e:	68 17       	cp	r22, r24
     a80:	79 07       	cpc	r23, r25
     a82:	09 f4       	brne	.+2      	; 0xa86 <common_listDeleteAny+0x2c>
     a84:	43 c0       	rjmp	.+134    	; 0xb0c <common_listDeleteAny+0xb2>
				common_listDropBack(list);
			}
			else {
				if (item->next != NULL) {
     a86:	82 81       	ldd	r24, Z+2	; 0x02
     a88:	93 81       	ldd	r25, Z+3	; 0x03
     a8a:	89 2b       	or	r24, r25
     a8c:	41 f0       	breq	.+16     	; 0xa9e <common_listDeleteAny+0x44>
					item->next->prev = item->prev;
     a8e:	a2 81       	ldd	r26, Z+2	; 0x02
     a90:	b3 81       	ldd	r27, Z+3	; 0x03
     a92:	84 81       	ldd	r24, Z+4	; 0x04
     a94:	95 81       	ldd	r25, Z+5	; 0x05
     a96:	15 96       	adiw	r26, 0x05	; 5
     a98:	9c 93       	st	X, r25
     a9a:	8e 93       	st	-X, r24
     a9c:	14 97       	sbiw	r26, 0x04	; 4
				}

				if (item->prev != NULL) {
     a9e:	84 81       	ldd	r24, Z+4	; 0x04
     aa0:	95 81       	ldd	r25, Z+5	; 0x05
     aa2:	89 2b       	or	r24, r25
     aa4:	41 f0       	breq	.+16     	; 0xab6 <common_listDeleteAny+0x5c>
					item->prev->next = item->next;
     aa6:	a4 81       	ldd	r26, Z+4	; 0x04
     aa8:	b5 81       	ldd	r27, Z+5	; 0x05
     aaa:	82 81       	ldd	r24, Z+2	; 0x02
     aac:	93 81       	ldd	r25, Z+3	; 0x03
     aae:	13 96       	adiw	r26, 0x03	; 3
     ab0:	9c 93       	st	X, r25
     ab2:	8e 93       	st	-X, r24
     ab4:	12 97       	sbiw	r26, 0x02	; 2
				}
				item->list = NULL;
     ab6:	11 82       	std	Z+1, r1	; 0x01
     ab8:	10 82       	st	Z, r1
			}
		}
	}

	return;
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	08 95       	ret
}

void common_listDropFront(volatile struct kLinkedListStruct_t* list)
{
	if (list != NULL) {
		if (list->head != NULL) {
     ac0:	8d 91       	ld	r24, X+
     ac2:	9c 91       	ld	r25, X
     ac4:	11 97       	sbiw	r26, 0x01	; 1
     ac6:	89 2b       	or	r24, r25
     ac8:	c1 f3       	breq	.-16     	; 0xaba <common_listDeleteAny+0x60>
			volatile struct kListItemStruct_t* prev;

			prev = list->head;
     aca:	ed 91       	ld	r30, X+
     acc:	fc 91       	ld	r31, X
     ace:	11 97       	sbiw	r26, 0x01	; 1
			list->head = list->head->next;
     ad0:	cd 91       	ld	r28, X+
     ad2:	dc 91       	ld	r29, X
     ad4:	11 97       	sbiw	r26, 0x01	; 1
     ad6:	8a 81       	ldd	r24, Y+2	; 0x02
     ad8:	9b 81       	ldd	r25, Y+3	; 0x03
     ada:	11 96       	adiw	r26, 0x01	; 1
     adc:	9c 93       	st	X, r25
     ade:	8e 93       	st	-X, r24

			if (list->head != NULL) {
     ae0:	8d 91       	ld	r24, X+
     ae2:	9c 91       	ld	r25, X
     ae4:	11 97       	sbiw	r26, 0x01	; 1
     ae6:	89 2b       	or	r24, r25
     ae8:	29 f0       	breq	.+10     	; 0xaf4 <common_listDeleteAny+0x9a>
				list->head->prev = NULL;
     aea:	cd 91       	ld	r28, X+
     aec:	dc 91       	ld	r29, X
     aee:	11 97       	sbiw	r26, 0x01	; 1
     af0:	1d 82       	std	Y+5, r1	; 0x05
     af2:	1c 82       	std	Y+4, r1	; 0x04
			}

			if (prev == list->tail) {
     af4:	12 96       	adiw	r26, 0x02	; 2
     af6:	8d 91       	ld	r24, X+
     af8:	9c 91       	ld	r25, X
     afa:	13 97       	sbiw	r26, 0x03	; 3
     afc:	e8 17       	cp	r30, r24
     afe:	f9 07       	cpc	r31, r25
     b00:	d1 f6       	brne	.-76     	; 0xab6 <common_listDeleteAny+0x5c>
				list->tail = NULL;
     b02:	13 96       	adiw	r26, 0x03	; 3
     b04:	1c 92       	st	X, r1
     b06:	1e 92       	st	-X, r1
     b08:	12 97       	sbiw	r26, 0x02	; 2
     b0a:	d5 cf       	rjmp	.-86     	; 0xab6 <common_listDeleteAny+0x5c>
}

void common_listDropBack(volatile struct kLinkedListStruct_t* list)
{
	if (list != NULL) {
		if (list->tail != NULL) {
     b0c:	12 96       	adiw	r26, 0x02	; 2
     b0e:	8d 91       	ld	r24, X+
     b10:	9c 91       	ld	r25, X
     b12:	13 97       	sbiw	r26, 0x03	; 3
     b14:	89 2b       	or	r24, r25
     b16:	89 f2       	breq	.-94     	; 0xaba <common_listDeleteAny+0x60>
			volatile struct kListItemStruct_t* next;

			next = list->tail;
     b18:	12 96       	adiw	r26, 0x02	; 2
     b1a:	ed 91       	ld	r30, X+
     b1c:	fc 91       	ld	r31, X
     b1e:	13 97       	sbiw	r26, 0x03	; 3
			list->tail = list->tail->prev;
     b20:	12 96       	adiw	r26, 0x02	; 2
     b22:	cd 91       	ld	r28, X+
     b24:	dc 91       	ld	r29, X
     b26:	13 97       	sbiw	r26, 0x03	; 3
     b28:	8c 81       	ldd	r24, Y+4	; 0x04
     b2a:	9d 81       	ldd	r25, Y+5	; 0x05
     b2c:	13 96       	adiw	r26, 0x03	; 3
     b2e:	9c 93       	st	X, r25
     b30:	8e 93       	st	-X, r24
     b32:	12 97       	sbiw	r26, 0x02	; 2

			if (list->tail != NULL) {
     b34:	12 96       	adiw	r26, 0x02	; 2
     b36:	8d 91       	ld	r24, X+
     b38:	9c 91       	ld	r25, X
     b3a:	13 97       	sbiw	r26, 0x03	; 3
     b3c:	89 2b       	or	r24, r25
     b3e:	31 f0       	breq	.+12     	; 0xb4c <common_listDeleteAny+0xf2>
				list->tail->next = NULL;
     b40:	12 96       	adiw	r26, 0x02	; 2
     b42:	cd 91       	ld	r28, X+
     b44:	dc 91       	ld	r29, X
     b46:	13 97       	sbiw	r26, 0x03	; 3
     b48:	1b 82       	std	Y+3, r1	; 0x03
     b4a:	1a 82       	std	Y+2, r1	; 0x02
			}

			if (next == list->head) {
     b4c:	8d 91       	ld	r24, X+
     b4e:	9c 91       	ld	r25, X
     b50:	11 97       	sbiw	r26, 0x01	; 1
     b52:	e8 17       	cp	r30, r24
     b54:	f9 07       	cpc	r31, r25
     b56:	09 f0       	breq	.+2      	; 0xb5a <common_listDeleteAny+0x100>
     b58:	ae cf       	rjmp	.-164    	; 0xab6 <common_listDeleteAny+0x5c>
				list->head = NULL;
     b5a:	11 96       	adiw	r26, 0x01	; 1
     b5c:	1c 92       	st	X, r1
     b5e:	1e 92       	st	-X, r1
     b60:	aa cf       	rjmp	.-172    	; 0xab6 <common_listDeleteAny+0x5c>

00000b62 <uart_init>:

void uart_putc(char c)
{
	UDR0 = c;
	while (!(UCSR0A & (1<<UDRE)));
}
     b62:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     b66:	88 e1       	ldi	r24, 0x18	; 24
     b68:	89 b9       	out	0x09, r24	; 9
     b6a:	59 9a       	sbi	0x0b, 1	; 11
     b6c:	88 e9       	ldi	r24, 0x98	; 152
     b6e:	8a b9       	out	0x0a, r24	; 10
     b70:	86 e0       	ldi	r24, 0x06	; 6
     b72:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     b76:	08 95       	ret

00000b78 <uart_puts>:

void uart_puts(char * msg)
{
     b78:	fc 01       	movw	r30, r24
	kIterator_t i = 0;
	while (msg[i] != '\0') {
     b7a:	90 81       	ld	r25, Z
     b7c:	99 23       	and	r25, r25
     b7e:	39 f0       	breq	.+14     	; 0xb8e <uart_puts+0x16>
     b80:	31 96       	adiw	r30, 0x01	; 1
	UCSR0C = (0<<USBS)|(1<<UCSZ00)|(1<<UCSZ01)|(0<<UCSZ02)|(0<<UPM00)|(0<<UPM01)|(0<<UMSEL0);
}

void uart_putc(char c)
{
	UDR0 = c;
     b82:	9c b9       	out	0x0c, r25	; 12
	while (!(UCSR0A & (1<<UDRE)));
     b84:	5d 9b       	sbis	0x0b, 5	; 11
     b86:	fe cf       	rjmp	.-4      	; 0xb84 <uart_puts+0xc>
}

void uart_puts(char * msg)
{
	kIterator_t i = 0;
	while (msg[i] != '\0') {
     b88:	91 91       	ld	r25, Z+
     b8a:	91 11       	cpse	r25, r1
     b8c:	fa cf       	rjmp	.-12     	; 0xb82 <uart_puts+0xa>
     b8e:	08 95       	ret

00000b90 <__vector_15>:

void __attribute__ (( naked, noinline )) arch_tick();

ISR(TIMER0_COMP_vect, ISR_NAKED)
{
	arch_tick();
     b90:	1d db       	rcall	.-2502   	; 0x1cc <arch_tick>
	arch_RETI();
     b92:	18 95       	reti

00000b94 <arch_platformInit>:
volatile byte kReservedMemory[CFG_KERNEL_RESERVED_MEMORY];
kStackPtr_t kStackPointer = &kReservedMemory[CFG_KERNEL_RESERVED_MEMORY-1];

void arch_platformInit()
{
	uart_init();
     b94:	e6 df       	rcall	.-52     	; 0xb62 <uart_init>
	arch_exitCriticalSection();
}

void arch_setupSystickTimer()
{
	kStatusRegister_t sreg = arch_STATUS_REG;
     b96:	9f b7       	in	r25, 0x3f	; 63
	arch_DISABLE_INTERRUPTS();
     b98:	f8 94       	cli
	TCCR0 |= (CFG_KERNEL_TIMER_PRESCALER << CS00); // prescaler 64 cs11 & cs10 = 1
     b9a:	83 b7       	in	r24, 0x33	; 51
     b9c:	83 60       	ori	r24, 0x03	; 3
     b9e:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
     ba0:	12 be       	out	0x32, r1	; 50
	OCR0 = 250;//CFG_TIMER_COMPARE_VALUE; Corrected accordingly to ISR execution time
     ba2:	8a ef       	ldi	r24, 0xFA	; 250
     ba4:	81 bf       	out	0x31, r24	; 49
	arch_ENABLE_INTERRUPTS();
     ba6:	78 94       	sei
	arch_STATUS_REG = sreg;
     ba8:	9f bf       	out	0x3f, r25	; 63
}

void arch_startSystickTimer()
{
	kStatusRegister_t sreg = arch_STATUS_REG;
     baa:	9f b7       	in	r25, 0x3f	; 63
	arch_DISABLE_INTERRUPTS();
     bac:	f8 94       	cli
	TIMSK |= (1 << OCIE0);
     bae:	87 b7       	in	r24, 0x37	; 55
     bb0:	82 60       	ori	r24, 0x02	; 2
     bb2:	87 bf       	out	0x37, r24	; 55
	arch_ENABLE_INTERRUPTS();
     bb4:	78 94       	sei
	arch_STATUS_REG = sreg;
     bb6:	9f bf       	out	0x3f, r25	; 63
void arch_platformInit()
{
	uart_init();
	arch_setupSystickTimer();
	arch_startSystickTimer();
	arch_ENABLE_INTERRUPTS();
     bb8:	78 94       	sei
     bba:	08 95       	ret

00000bbc <arch_spinlockAcquire>:
}

void arch_spinlockAcquire(kSpinlock_t* spinlock)
{
     bbc:	fc 01       	movw	r30, r24
	while(1) {
		asm volatile("": : :"memory");
		if(*spinlock == 0) {
     bbe:	90 81       	ld	r25, Z
     bc0:	91 11       	cpse	r25, r1
     bc2:	fd cf       	rjmp	.-6      	; 0xbbe <arch_spinlockAcquire+0x2>
			arch_enterCriticalSection();
     bc4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     bc8:	f8 94       	cli
     bca:	0f 92       	push	r0
			if(*spinlock == 0) {
     bcc:	80 81       	ld	r24, Z
     bce:	88 23       	and	r24, r24
     bd0:	41 f0       	breq	.+16     	; 0xbe2 <arch_spinlockAcquire+0x26>
				*spinlock = 1;
				arch_exitCriticalSection();
				return;
			}
			arch_exitCriticalSection();
     bd2:	0f 90       	pop	r0
     bd4:	78 94       	sei
     bd6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>

void arch_spinlockAcquire(kSpinlock_t* spinlock)
{
	while(1) {
		asm volatile("": : :"memory");
		if(*spinlock == 0) {
     bda:	90 81       	ld	r25, Z
     bdc:	91 11       	cpse	r25, r1
     bde:	ef cf       	rjmp	.-34     	; 0xbbe <arch_spinlockAcquire+0x2>
     be0:	f1 cf       	rjmp	.-30     	; 0xbc4 <arch_spinlockAcquire+0x8>
			arch_enterCriticalSection();
			if(*spinlock == 0) {
				*spinlock = 1;
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	80 83       	st	Z, r24
				arch_exitCriticalSection();
     be6:	0f 90       	pop	r0
     be8:	78 94       	sei
     bea:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
				return;
     bee:	08 95       	ret

00000bf0 <arch_spinlockRelease>:
	}
}

void arch_spinlockRelease(kSpinlock_t* spinlock)
{
	arch_enterCriticalSection();
     bf0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     bf4:	f8 94       	cli
     bf6:	0f 92       	push	r0
	*spinlock = 0;
     bf8:	fc 01       	movw	r30, r24
     bfa:	10 82       	st	Z, r1
	arch_exitCriticalSection();
     bfc:	0f 90       	pop	r0
     bfe:	78 94       	sei
     c00:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
     c04:	08 95       	ret

00000c06 <arch_prepareStackFrame>:
#include <arch/mega128/mega128.h>

kStackPtr_t arch_prepareStackFrame(kStackPtr_t stackPointer, kStackSize_t stackSize, kTask_t taskPointer, void* args)
{
	//TODO: 3-byte PC support
	stackPointer += stackSize-1;
     c06:	61 50       	subi	r22, 0x01	; 1
     c08:	71 09       	sbc	r23, r1
     c0a:	86 0f       	add	r24, r22
     c0c:	97 1f       	adc	r25, r23
	*(stackPointer--) = 0; //(uint16_t)kernel_taskReturnHook & 0xFF;	// Function address - will be grabbed by RETI when the task executes for first time, lower 8 bits
     c0e:	fc 01       	movw	r30, r24
     c10:	10 82       	st	Z, r1
	*(stackPointer--) = 0; //(uint16_t)kernel_taskReturnHook >> 8;
     c12:	31 97       	sbiw	r30, 0x01	; 1
     c14:	10 82       	st	Z, r1
	*(stackPointer--) = (uint16_t)taskPointer & 0xFF;	// Function address - will be grabbed by RETI when the task executes for first time, lower 8 bits
     c16:	31 97       	sbiw	r30, 0x01	; 1
     c18:	40 83       	st	Z, r20
	*(stackPointer--) = (uint16_t)taskPointer >> 8;		// Upper 8 bits
     c1a:	31 97       	sbiw	r30, 0x01	; 1
     c1c:	50 83       	st	Z, r21
	*(stackPointer--) = 0;								// R0 initial value, overwritten by SREG during context switch, should be initialized separately
     c1e:	31 97       	sbiw	r30, 0x01	; 1
     c20:	10 82       	st	Z, r1
	*(stackPointer--) = 0x80;							// SREG initial value - interrupts enabled
     c22:	31 97       	sbiw	r30, 0x01	; 1
     c24:	40 e8       	ldi	r20, 0x80	; 128
     c26:	40 83       	st	Z, r20
	*(stackPointer--) = 0x00;							// R1, needs to be 0 in gcc
     c28:	31 97       	sbiw	r30, 0x01	; 1
     c2a:	10 82       	st	Z, r1
	*(stackPointer--) = 0x02;							// R2
     c2c:	31 97       	sbiw	r30, 0x01	; 1
     c2e:	42 e0       	ldi	r20, 0x02	; 2
     c30:	40 83       	st	Z, r20
	*(stackPointer--) = 0x03;							// R3
     c32:	31 97       	sbiw	r30, 0x01	; 1
     c34:	43 e0       	ldi	r20, 0x03	; 3
     c36:	40 83       	st	Z, r20
	*(stackPointer--) = 0x04;							// R4
     c38:	31 97       	sbiw	r30, 0x01	; 1
     c3a:	44 e0       	ldi	r20, 0x04	; 4
     c3c:	40 83       	st	Z, r20
	*(stackPointer--) = 0x05;							// R5
     c3e:	31 97       	sbiw	r30, 0x01	; 1
     c40:	45 e0       	ldi	r20, 0x05	; 5
     c42:	40 83       	st	Z, r20
	*(stackPointer--) = 0x06;							// R6
     c44:	31 97       	sbiw	r30, 0x01	; 1
     c46:	46 e0       	ldi	r20, 0x06	; 6
     c48:	40 83       	st	Z, r20
	*(stackPointer--) = 0x07;							// R7
     c4a:	31 97       	sbiw	r30, 0x01	; 1
     c4c:	47 e0       	ldi	r20, 0x07	; 7
     c4e:	40 83       	st	Z, r20
	*(stackPointer--) = 0x08;							// R8
     c50:	31 97       	sbiw	r30, 0x01	; 1
     c52:	48 e0       	ldi	r20, 0x08	; 8
     c54:	40 83       	st	Z, r20
	*(stackPointer--) = 0x09;							// R9
     c56:	31 97       	sbiw	r30, 0x01	; 1
     c58:	49 e0       	ldi	r20, 0x09	; 9
     c5a:	40 83       	st	Z, r20
	*(stackPointer--) = 0x0A;							// R10
     c5c:	31 97       	sbiw	r30, 0x01	; 1
     c5e:	4a e0       	ldi	r20, 0x0A	; 10
     c60:	40 83       	st	Z, r20
	*(stackPointer--) = 0x0B;							// R11
     c62:	31 97       	sbiw	r30, 0x01	; 1
     c64:	4b e0       	ldi	r20, 0x0B	; 11
     c66:	40 83       	st	Z, r20
	*(stackPointer--) = 0x0C;							// R12
     c68:	31 97       	sbiw	r30, 0x01	; 1
     c6a:	4c e0       	ldi	r20, 0x0C	; 12
     c6c:	40 83       	st	Z, r20
	*(stackPointer--) = 0x0D;							// R13
     c6e:	31 97       	sbiw	r30, 0x01	; 1
     c70:	4d e0       	ldi	r20, 0x0D	; 13
     c72:	40 83       	st	Z, r20
	*(stackPointer--) = 0x0E;							// R14
     c74:	31 97       	sbiw	r30, 0x01	; 1
     c76:	4e e0       	ldi	r20, 0x0E	; 14
     c78:	40 83       	st	Z, r20
	*(stackPointer--) = 0x0F;							// R15
     c7a:	31 97       	sbiw	r30, 0x01	; 1
     c7c:	4f e0       	ldi	r20, 0x0F	; 15
     c7e:	40 83       	st	Z, r20
	*(stackPointer--) = 0x10;							// R16
     c80:	31 97       	sbiw	r30, 0x01	; 1
     c82:	40 e1       	ldi	r20, 0x10	; 16
     c84:	40 83       	st	Z, r20
	*(stackPointer--) = 0x11;							// R17
     c86:	31 97       	sbiw	r30, 0x01	; 1
     c88:	41 e1       	ldi	r20, 0x11	; 17
     c8a:	40 83       	st	Z, r20
	*(stackPointer--) = 0x12;							// R18
     c8c:	31 97       	sbiw	r30, 0x01	; 1
     c8e:	42 e1       	ldi	r20, 0x12	; 18
     c90:	40 83       	st	Z, r20
	*(stackPointer--) = 0x13;							// R19
     c92:	31 97       	sbiw	r30, 0x01	; 1
     c94:	43 e1       	ldi	r20, 0x13	; 19
     c96:	40 83       	st	Z, r20
	*(stackPointer--) = 0x14;							// R20
     c98:	31 97       	sbiw	r30, 0x01	; 1
     c9a:	44 e1       	ldi	r20, 0x14	; 20
     c9c:	40 83       	st	Z, r20
	*(stackPointer--) = 0x15;							// R21
     c9e:	31 97       	sbiw	r30, 0x01	; 1
     ca0:	45 e1       	ldi	r20, 0x15	; 21
     ca2:	40 83       	st	Z, r20
	*(stackPointer--) = 0x16;							// R22
     ca4:	31 97       	sbiw	r30, 0x01	; 1
     ca6:	46 e1       	ldi	r20, 0x16	; 22
     ca8:	40 83       	st	Z, r20
	*(stackPointer--) = 0x17;							// R23
     caa:	31 97       	sbiw	r30, 0x01	; 1
     cac:	47 e1       	ldi	r20, 0x17	; 23
     cae:	40 83       	st	Z, r20
	*(stackPointer--) = (uint16_t)args & 0xFF;			// R24, low byte of args pointer
     cb0:	31 97       	sbiw	r30, 0x01	; 1
     cb2:	20 83       	st	Z, r18
	*(stackPointer--) = (uint16_t)args >> 8;			// R25, high byte of args pointer
     cb4:	31 97       	sbiw	r30, 0x01	; 1
     cb6:	30 83       	st	Z, r19
	*(stackPointer--) = 0x1A;							// R26
     cb8:	31 97       	sbiw	r30, 0x01	; 1
     cba:	2a e1       	ldi	r18, 0x1A	; 26
     cbc:	20 83       	st	Z, r18
	*(stackPointer--) = 0x1B;							// R27
     cbe:	31 97       	sbiw	r30, 0x01	; 1
     cc0:	2b e1       	ldi	r18, 0x1B	; 27
     cc2:	20 83       	st	Z, r18
	*(stackPointer--) = 0x1C;							// R28
     cc4:	31 97       	sbiw	r30, 0x01	; 1
     cc6:	2c e1       	ldi	r18, 0x1C	; 28
     cc8:	20 83       	st	Z, r18
	*(stackPointer--) = 0x1D;							// R29
     cca:	31 97       	sbiw	r30, 0x01	; 1
     ccc:	2d e1       	ldi	r18, 0x1D	; 29
     cce:	20 83       	st	Z, r18
	*(stackPointer--) = 0x1E;							// R30
     cd0:	31 97       	sbiw	r30, 0x01	; 1
     cd2:	2e e1       	ldi	r18, 0x1E	; 30
     cd4:	20 83       	st	Z, r18
	*(stackPointer--) = 0x1F;							// R31
     cd6:	31 97       	sbiw	r30, 0x01	; 1
     cd8:	2f e1       	ldi	r18, 0x1F	; 31
     cda:	20 83       	st	Z, r18

	return stackPointer;
     cdc:	85 97       	sbiw	r24, 0x25	; 37
     cde:	08 95       	ret

00000ce0 <test_task>:
kTaskHandle_t test2;

void test_task() {
	while (1)
	{
		asm volatile("nop"::);
     ce0:	00 00       	nop
		uart_puts("Idling in test task yoooo\r\n");
     ce2:	8d e1       	ldi	r24, 0x1D	; 29
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	48 df       	rcall	.-368    	; 0xb78 <uart_puts>
     ce8:	fb cf       	rjmp	.-10     	; 0xce0 <test_task>

00000cea <test_task2>:
}

void test_task2() {
	while (1)
	{
		asm volatile("nop"::);
     cea:	00 00       	nop
		uart_puts("Idling in test task 2 yoooo\r\n");
     cec:	89 e3       	ldi	r24, 0x39	; 57
     cee:	91 e0       	ldi	r25, 0x01	; 1
     cf0:	43 df       	rcall	.-378    	; 0xb78 <uart_puts>
     cf2:	fb cf       	rjmp	.-10     	; 0xcea <test_task2>

00000cf4 <main>:
	}
}

int main(void)
{
    kernel_init();
     cf4:	49 db       	rcall	.-2414   	; 0x388 <kernel_init>
	tasks_createTaskDynamic(&test, test_task, NULL, 100, 3, KTASK_NORMAL, "test1");
     cf6:	87 e5       	ldi	r24, 0x57	; 87
     cf8:	c8 2e       	mov	r12, r24
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	d8 2e       	mov	r13, r24
     cfe:	93 e0       	ldi	r25, 0x03	; 3
     d00:	e9 2e       	mov	r14, r25
     d02:	03 e0       	ldi	r16, 0x03	; 3
     d04:	24 e6       	ldi	r18, 0x64	; 100
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e0       	ldi	r20, 0x00	; 0
     d0a:	50 e0       	ldi	r21, 0x00	; 0
     d0c:	60 e7       	ldi	r22, 0x70	; 112
     d0e:	76 e0       	ldi	r23, 0x06	; 6
     d10:	8b e3       	ldi	r24, 0x3B	; 59
     d12:	9d e0       	ldi	r25, 0x0D	; 13
     d14:	16 dd       	rcall	.-1492   	; 0x742 <tasks_createTaskDynamic>
	tasks_createTaskDynamic(&test2, test_task2, NULL, 100, 3, KTASK_NORMAL, "test2");
     d16:	2d e5       	ldi	r18, 0x5D	; 93
     d18:	c2 2e       	mov	r12, r18
     d1a:	21 e0       	ldi	r18, 0x01	; 1
     d1c:	d2 2e       	mov	r13, r18
     d1e:	24 e6       	ldi	r18, 0x64	; 100
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	40 e0       	ldi	r20, 0x00	; 0
     d24:	50 e0       	ldi	r21, 0x00	; 0
     d26:	65 e7       	ldi	r22, 0x75	; 117
     d28:	76 e0       	ldi	r23, 0x06	; 6
     d2a:	8d e3       	ldi	r24, 0x3D	; 61
     d2c:	9d e0       	ldi	r25, 0x0D	; 13
     d2e:	09 dd       	rcall	.-1518   	; 0x742 <tasks_createTaskDynamic>
    while (1)
    {
		uart_puts("Idling in mah main\r\n");
     d30:	83 e6       	ldi	r24, 0x63	; 99
     d32:	91 e0       	ldi	r25, 0x01	; 1
     d34:	21 df       	rcall	.-446    	; 0xb78 <uart_puts>
     d36:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d38:	81 ee       	ldi	r24, 0xE1	; 225
     d3a:	94 e0       	ldi	r25, 0x04	; 4
     d3c:	21 50       	subi	r18, 0x01	; 1
     d3e:	80 40       	sbci	r24, 0x00	; 0
     d40:	90 40       	sbci	r25, 0x00	; 0
     d42:	e1 f7       	brne	.-8      	; 0xd3c <main+0x48>
     d44:	00 c0       	rjmp	.+0      	; 0xd46 <main+0x52>
     d46:	00 00       	nop
     d48:	f3 cf       	rjmp	.-26     	; 0xd30 <main+0x3c>

00000d4a <vfprintf>:
     d4a:	2f 92       	push	r2
     d4c:	3f 92       	push	r3
     d4e:	4f 92       	push	r4
     d50:	5f 92       	push	r5
     d52:	6f 92       	push	r6
     d54:	7f 92       	push	r7
     d56:	8f 92       	push	r8
     d58:	9f 92       	push	r9
     d5a:	af 92       	push	r10
     d5c:	bf 92       	push	r11
     d5e:	cf 92       	push	r12
     d60:	df 92       	push	r13
     d62:	ef 92       	push	r14
     d64:	ff 92       	push	r15
     d66:	0f 93       	push	r16
     d68:	1f 93       	push	r17
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	60 97       	sbiw	r28, 0x10	; 16
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	de bf       	out	0x3e, r29	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	7c 01       	movw	r14, r24
     d80:	1b 01       	movw	r2, r22
     d82:	6a 01       	movw	r12, r20
     d84:	fc 01       	movw	r30, r24
     d86:	17 82       	std	Z+7, r1	; 0x07
     d88:	16 82       	std	Z+6, r1	; 0x06
     d8a:	83 81       	ldd	r24, Z+3	; 0x03
     d8c:	81 ff       	sbrs	r24, 1
     d8e:	2a c3       	rjmp	.+1620   	; 0x13e4 <__stack+0x2e5>
     d90:	9e 01       	movw	r18, r28
     d92:	2f 5f       	subi	r18, 0xFF	; 255
     d94:	3f 4f       	sbci	r19, 0xFF	; 255
     d96:	39 01       	movw	r6, r18
     d98:	f7 01       	movw	r30, r14
     d9a:	93 81       	ldd	r25, Z+3	; 0x03
     d9c:	f1 01       	movw	r30, r2
     d9e:	93 fd       	sbrc	r25, 3
     da0:	85 91       	lpm	r24, Z+
     da2:	93 ff       	sbrs	r25, 3
     da4:	81 91       	ld	r24, Z+
     da6:	1f 01       	movw	r2, r30
     da8:	88 23       	and	r24, r24
     daa:	09 f4       	brne	.+2      	; 0xdae <vfprintf+0x64>
     dac:	17 c3       	rjmp	.+1582   	; 0x13dc <__stack+0x2dd>
     dae:	85 32       	cpi	r24, 0x25	; 37
     db0:	39 f4       	brne	.+14     	; 0xdc0 <vfprintf+0x76>
     db2:	93 fd       	sbrc	r25, 3
     db4:	85 91       	lpm	r24, Z+
     db6:	93 ff       	sbrs	r25, 3
     db8:	81 91       	ld	r24, Z+
     dba:	1f 01       	movw	r2, r30
     dbc:	85 32       	cpi	r24, 0x25	; 37
     dbe:	31 f4       	brne	.+12     	; 0xdcc <vfprintf+0x82>
     dc0:	b7 01       	movw	r22, r14
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	39 d4       	rcall	.+2162   	; 0x1638 <fputc>
     dc6:	56 01       	movw	r10, r12
     dc8:	65 01       	movw	r12, r10
     dca:	e6 cf       	rjmp	.-52     	; 0xd98 <vfprintf+0x4e>
     dcc:	10 e0       	ldi	r17, 0x00	; 0
     dce:	51 2c       	mov	r5, r1
     dd0:	91 2c       	mov	r9, r1
     dd2:	ff e1       	ldi	r31, 0x1F	; 31
     dd4:	f9 15       	cp	r31, r9
     dd6:	d8 f0       	brcs	.+54     	; 0xe0e <vfprintf+0xc4>
     dd8:	8b 32       	cpi	r24, 0x2B	; 43
     dda:	79 f0       	breq	.+30     	; 0xdfa <vfprintf+0xb0>
     ddc:	38 f4       	brcc	.+14     	; 0xdec <vfprintf+0xa2>
     dde:	80 32       	cpi	r24, 0x20	; 32
     de0:	79 f0       	breq	.+30     	; 0xe00 <vfprintf+0xb6>
     de2:	83 32       	cpi	r24, 0x23	; 35
     de4:	a1 f4       	brne	.+40     	; 0xe0e <vfprintf+0xc4>
     de6:	f9 2d       	mov	r31, r9
     de8:	f0 61       	ori	r31, 0x10	; 16
     dea:	2e c0       	rjmp	.+92     	; 0xe48 <vfprintf+0xfe>
     dec:	8d 32       	cpi	r24, 0x2D	; 45
     dee:	61 f0       	breq	.+24     	; 0xe08 <vfprintf+0xbe>
     df0:	80 33       	cpi	r24, 0x30	; 48
     df2:	69 f4       	brne	.+26     	; 0xe0e <vfprintf+0xc4>
     df4:	29 2d       	mov	r18, r9
     df6:	21 60       	ori	r18, 0x01	; 1
     df8:	2d c0       	rjmp	.+90     	; 0xe54 <vfprintf+0x10a>
     dfa:	39 2d       	mov	r19, r9
     dfc:	32 60       	ori	r19, 0x02	; 2
     dfe:	93 2e       	mov	r9, r19
     e00:	89 2d       	mov	r24, r9
     e02:	84 60       	ori	r24, 0x04	; 4
     e04:	98 2e       	mov	r9, r24
     e06:	2a c0       	rjmp	.+84     	; 0xe5c <vfprintf+0x112>
     e08:	e9 2d       	mov	r30, r9
     e0a:	e8 60       	ori	r30, 0x08	; 8
     e0c:	15 c0       	rjmp	.+42     	; 0xe38 <vfprintf+0xee>
     e0e:	97 fc       	sbrc	r9, 7
     e10:	2d c0       	rjmp	.+90     	; 0xe6c <vfprintf+0x122>
     e12:	20 ed       	ldi	r18, 0xD0	; 208
     e14:	28 0f       	add	r18, r24
     e16:	2a 30       	cpi	r18, 0x0A	; 10
     e18:	88 f4       	brcc	.+34     	; 0xe3c <vfprintf+0xf2>
     e1a:	96 fe       	sbrs	r9, 6
     e1c:	06 c0       	rjmp	.+12     	; 0xe2a <vfprintf+0xe0>
     e1e:	3a e0       	ldi	r19, 0x0A	; 10
     e20:	13 9f       	mul	r17, r19
     e22:	20 0d       	add	r18, r0
     e24:	11 24       	eor	r1, r1
     e26:	12 2f       	mov	r17, r18
     e28:	19 c0       	rjmp	.+50     	; 0xe5c <vfprintf+0x112>
     e2a:	8a e0       	ldi	r24, 0x0A	; 10
     e2c:	58 9e       	mul	r5, r24
     e2e:	20 0d       	add	r18, r0
     e30:	11 24       	eor	r1, r1
     e32:	52 2e       	mov	r5, r18
     e34:	e9 2d       	mov	r30, r9
     e36:	e0 62       	ori	r30, 0x20	; 32
     e38:	9e 2e       	mov	r9, r30
     e3a:	10 c0       	rjmp	.+32     	; 0xe5c <vfprintf+0x112>
     e3c:	8e 32       	cpi	r24, 0x2E	; 46
     e3e:	31 f4       	brne	.+12     	; 0xe4c <vfprintf+0x102>
     e40:	96 fc       	sbrc	r9, 6
     e42:	cc c2       	rjmp	.+1432   	; 0x13dc <__stack+0x2dd>
     e44:	f9 2d       	mov	r31, r9
     e46:	f0 64       	ori	r31, 0x40	; 64
     e48:	9f 2e       	mov	r9, r31
     e4a:	08 c0       	rjmp	.+16     	; 0xe5c <vfprintf+0x112>
     e4c:	8c 36       	cpi	r24, 0x6C	; 108
     e4e:	21 f4       	brne	.+8      	; 0xe58 <vfprintf+0x10e>
     e50:	29 2d       	mov	r18, r9
     e52:	20 68       	ori	r18, 0x80	; 128
     e54:	92 2e       	mov	r9, r18
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <vfprintf+0x112>
     e58:	88 36       	cpi	r24, 0x68	; 104
     e5a:	41 f4       	brne	.+16     	; 0xe6c <vfprintf+0x122>
     e5c:	f1 01       	movw	r30, r2
     e5e:	93 fd       	sbrc	r25, 3
     e60:	85 91       	lpm	r24, Z+
     e62:	93 ff       	sbrs	r25, 3
     e64:	81 91       	ld	r24, Z+
     e66:	1f 01       	movw	r2, r30
     e68:	81 11       	cpse	r24, r1
     e6a:	b3 cf       	rjmp	.-154    	; 0xdd2 <vfprintf+0x88>
     e6c:	9b eb       	ldi	r25, 0xBB	; 187
     e6e:	98 0f       	add	r25, r24
     e70:	93 30       	cpi	r25, 0x03	; 3
     e72:	20 f4       	brcc	.+8      	; 0xe7c <vfprintf+0x132>
     e74:	99 2d       	mov	r25, r9
     e76:	90 61       	ori	r25, 0x10	; 16
     e78:	80 5e       	subi	r24, 0xE0	; 224
     e7a:	07 c0       	rjmp	.+14     	; 0xe8a <vfprintf+0x140>
     e7c:	9b e9       	ldi	r25, 0x9B	; 155
     e7e:	98 0f       	add	r25, r24
     e80:	93 30       	cpi	r25, 0x03	; 3
     e82:	08 f0       	brcs	.+2      	; 0xe86 <vfprintf+0x13c>
     e84:	59 c1       	rjmp	.+690    	; 0x1138 <__stack+0x39>
     e86:	99 2d       	mov	r25, r9
     e88:	9f 7e       	andi	r25, 0xEF	; 239
     e8a:	96 ff       	sbrs	r25, 6
     e8c:	16 e0       	ldi	r17, 0x06	; 6
     e8e:	9f 73       	andi	r25, 0x3F	; 63
     e90:	99 2e       	mov	r9, r25
     e92:	85 36       	cpi	r24, 0x65	; 101
     e94:	19 f4       	brne	.+6      	; 0xe9c <vfprintf+0x152>
     e96:	90 64       	ori	r25, 0x40	; 64
     e98:	99 2e       	mov	r9, r25
     e9a:	08 c0       	rjmp	.+16     	; 0xeac <vfprintf+0x162>
     e9c:	86 36       	cpi	r24, 0x66	; 102
     e9e:	21 f4       	brne	.+8      	; 0xea8 <vfprintf+0x15e>
     ea0:	39 2f       	mov	r19, r25
     ea2:	30 68       	ori	r19, 0x80	; 128
     ea4:	93 2e       	mov	r9, r19
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <vfprintf+0x162>
     ea8:	11 11       	cpse	r17, r1
     eaa:	11 50       	subi	r17, 0x01	; 1
     eac:	97 fe       	sbrs	r9, 7
     eae:	07 c0       	rjmp	.+14     	; 0xebe <vfprintf+0x174>
     eb0:	1c 33       	cpi	r17, 0x3C	; 60
     eb2:	50 f4       	brcc	.+20     	; 0xec8 <vfprintf+0x17e>
     eb4:	44 24       	eor	r4, r4
     eb6:	43 94       	inc	r4
     eb8:	41 0e       	add	r4, r17
     eba:	27 e0       	ldi	r18, 0x07	; 7
     ebc:	0b c0       	rjmp	.+22     	; 0xed4 <vfprintf+0x18a>
     ebe:	18 30       	cpi	r17, 0x08	; 8
     ec0:	38 f0       	brcs	.+14     	; 0xed0 <vfprintf+0x186>
     ec2:	27 e0       	ldi	r18, 0x07	; 7
     ec4:	17 e0       	ldi	r17, 0x07	; 7
     ec6:	05 c0       	rjmp	.+10     	; 0xed2 <vfprintf+0x188>
     ec8:	27 e0       	ldi	r18, 0x07	; 7
     eca:	9c e3       	ldi	r25, 0x3C	; 60
     ecc:	49 2e       	mov	r4, r25
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <vfprintf+0x18a>
     ed0:	21 2f       	mov	r18, r17
     ed2:	41 2c       	mov	r4, r1
     ed4:	56 01       	movw	r10, r12
     ed6:	84 e0       	ldi	r24, 0x04	; 4
     ed8:	a8 0e       	add	r10, r24
     eda:	b1 1c       	adc	r11, r1
     edc:	f6 01       	movw	r30, r12
     ede:	60 81       	ld	r22, Z
     ee0:	71 81       	ldd	r23, Z+1	; 0x01
     ee2:	82 81       	ldd	r24, Z+2	; 0x02
     ee4:	93 81       	ldd	r25, Z+3	; 0x03
     ee6:	04 2d       	mov	r16, r4
     ee8:	a3 01       	movw	r20, r6
     eea:	b8 d2       	rcall	.+1392   	; 0x145c <__ftoa_engine>
     eec:	6c 01       	movw	r12, r24
     eee:	f9 81       	ldd	r31, Y+1	; 0x01
     ef0:	fc 87       	std	Y+12, r31	; 0x0c
     ef2:	f0 ff       	sbrs	r31, 0
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <vfprintf+0x1b0>
     ef6:	f3 ff       	sbrs	r31, 3
     ef8:	06 c0       	rjmp	.+12     	; 0xf06 <vfprintf+0x1bc>
     efa:	91 fc       	sbrc	r9, 1
     efc:	06 c0       	rjmp	.+12     	; 0xf0a <vfprintf+0x1c0>
     efe:	92 fe       	sbrs	r9, 2
     f00:	06 c0       	rjmp	.+12     	; 0xf0e <vfprintf+0x1c4>
     f02:	00 e2       	ldi	r16, 0x20	; 32
     f04:	05 c0       	rjmp	.+10     	; 0xf10 <vfprintf+0x1c6>
     f06:	0d e2       	ldi	r16, 0x2D	; 45
     f08:	03 c0       	rjmp	.+6      	; 0xf10 <vfprintf+0x1c6>
     f0a:	0b e2       	ldi	r16, 0x2B	; 43
     f0c:	01 c0       	rjmp	.+2      	; 0xf10 <vfprintf+0x1c6>
     f0e:	00 e0       	ldi	r16, 0x00	; 0
     f10:	8c 85       	ldd	r24, Y+12	; 0x0c
     f12:	8c 70       	andi	r24, 0x0C	; 12
     f14:	19 f0       	breq	.+6      	; 0xf1c <vfprintf+0x1d2>
     f16:	01 11       	cpse	r16, r1
     f18:	43 c2       	rjmp	.+1158   	; 0x13a0 <__stack+0x2a1>
     f1a:	80 c2       	rjmp	.+1280   	; 0x141c <__stack+0x31d>
     f1c:	97 fe       	sbrs	r9, 7
     f1e:	10 c0       	rjmp	.+32     	; 0xf40 <vfprintf+0x1f6>
     f20:	4c 0c       	add	r4, r12
     f22:	fc 85       	ldd	r31, Y+12	; 0x0c
     f24:	f4 ff       	sbrs	r31, 4
     f26:	04 c0       	rjmp	.+8      	; 0xf30 <vfprintf+0x1e6>
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	81 33       	cpi	r24, 0x31	; 49
     f2c:	09 f4       	brne	.+2      	; 0xf30 <vfprintf+0x1e6>
     f2e:	4a 94       	dec	r4
     f30:	14 14       	cp	r1, r4
     f32:	74 f5       	brge	.+92     	; 0xf90 <vfprintf+0x246>
     f34:	28 e0       	ldi	r18, 0x08	; 8
     f36:	24 15       	cp	r18, r4
     f38:	78 f5       	brcc	.+94     	; 0xf98 <vfprintf+0x24e>
     f3a:	88 e0       	ldi	r24, 0x08	; 8
     f3c:	48 2e       	mov	r4, r24
     f3e:	2c c0       	rjmp	.+88     	; 0xf98 <vfprintf+0x24e>
     f40:	96 fc       	sbrc	r9, 6
     f42:	2a c0       	rjmp	.+84     	; 0xf98 <vfprintf+0x24e>
     f44:	81 2f       	mov	r24, r17
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	8c 15       	cp	r24, r12
     f4a:	9d 05       	cpc	r25, r13
     f4c:	9c f0       	brlt	.+38     	; 0xf74 <vfprintf+0x22a>
     f4e:	3c ef       	ldi	r19, 0xFC	; 252
     f50:	c3 16       	cp	r12, r19
     f52:	3f ef       	ldi	r19, 0xFF	; 255
     f54:	d3 06       	cpc	r13, r19
     f56:	74 f0       	brlt	.+28     	; 0xf74 <vfprintf+0x22a>
     f58:	89 2d       	mov	r24, r9
     f5a:	80 68       	ori	r24, 0x80	; 128
     f5c:	98 2e       	mov	r9, r24
     f5e:	0a c0       	rjmp	.+20     	; 0xf74 <vfprintf+0x22a>
     f60:	e2 e0       	ldi	r30, 0x02	; 2
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	ec 0f       	add	r30, r28
     f66:	fd 1f       	adc	r31, r29
     f68:	e1 0f       	add	r30, r17
     f6a:	f1 1d       	adc	r31, r1
     f6c:	80 81       	ld	r24, Z
     f6e:	80 33       	cpi	r24, 0x30	; 48
     f70:	19 f4       	brne	.+6      	; 0xf78 <vfprintf+0x22e>
     f72:	11 50       	subi	r17, 0x01	; 1
     f74:	11 11       	cpse	r17, r1
     f76:	f4 cf       	rjmp	.-24     	; 0xf60 <vfprintf+0x216>
     f78:	97 fe       	sbrs	r9, 7
     f7a:	0e c0       	rjmp	.+28     	; 0xf98 <vfprintf+0x24e>
     f7c:	44 24       	eor	r4, r4
     f7e:	43 94       	inc	r4
     f80:	41 0e       	add	r4, r17
     f82:	81 2f       	mov	r24, r17
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	c8 16       	cp	r12, r24
     f88:	d9 06       	cpc	r13, r25
     f8a:	2c f4       	brge	.+10     	; 0xf96 <vfprintf+0x24c>
     f8c:	1c 19       	sub	r17, r12
     f8e:	04 c0       	rjmp	.+8      	; 0xf98 <vfprintf+0x24e>
     f90:	44 24       	eor	r4, r4
     f92:	43 94       	inc	r4
     f94:	01 c0       	rjmp	.+2      	; 0xf98 <vfprintf+0x24e>
     f96:	10 e0       	ldi	r17, 0x00	; 0
     f98:	97 fe       	sbrs	r9, 7
     f9a:	06 c0       	rjmp	.+12     	; 0xfa8 <vfprintf+0x25e>
     f9c:	1c 14       	cp	r1, r12
     f9e:	1d 04       	cpc	r1, r13
     fa0:	34 f4       	brge	.+12     	; 0xfae <vfprintf+0x264>
     fa2:	c6 01       	movw	r24, r12
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	05 c0       	rjmp	.+10     	; 0xfb2 <vfprintf+0x268>
     fa8:	85 e0       	ldi	r24, 0x05	; 5
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <vfprintf+0x268>
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	01 11       	cpse	r16, r1
     fb4:	01 96       	adiw	r24, 0x01	; 1
     fb6:	11 23       	and	r17, r17
     fb8:	31 f0       	breq	.+12     	; 0xfc6 <vfprintf+0x27c>
     fba:	21 2f       	mov	r18, r17
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	2f 5f       	subi	r18, 0xFF	; 255
     fc0:	3f 4f       	sbci	r19, 0xFF	; 255
     fc2:	82 0f       	add	r24, r18
     fc4:	93 1f       	adc	r25, r19
     fc6:	25 2d       	mov	r18, r5
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	82 17       	cp	r24, r18
     fcc:	93 07       	cpc	r25, r19
     fce:	14 f4       	brge	.+4      	; 0xfd4 <vfprintf+0x28a>
     fd0:	58 1a       	sub	r5, r24
     fd2:	01 c0       	rjmp	.+2      	; 0xfd6 <vfprintf+0x28c>
     fd4:	51 2c       	mov	r5, r1
     fd6:	89 2d       	mov	r24, r9
     fd8:	89 70       	andi	r24, 0x09	; 9
     fda:	41 f4       	brne	.+16     	; 0xfec <vfprintf+0x2a2>
     fdc:	55 20       	and	r5, r5
     fde:	31 f0       	breq	.+12     	; 0xfec <vfprintf+0x2a2>
     fe0:	b7 01       	movw	r22, r14
     fe2:	80 e2       	ldi	r24, 0x20	; 32
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	28 d3       	rcall	.+1616   	; 0x1638 <fputc>
     fe8:	5a 94       	dec	r5
     fea:	f8 cf       	rjmp	.-16     	; 0xfdc <vfprintf+0x292>
     fec:	00 23       	and	r16, r16
     fee:	21 f0       	breq	.+8      	; 0xff8 <vfprintf+0x2ae>
     ff0:	b7 01       	movw	r22, r14
     ff2:	80 2f       	mov	r24, r16
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	20 d3       	rcall	.+1600   	; 0x1638 <fputc>
     ff8:	93 fc       	sbrc	r9, 3
     ffa:	08 c0       	rjmp	.+16     	; 0x100c <__DATA_REGION_LENGTH__+0xc>
     ffc:	55 20       	and	r5, r5
     ffe:	31 f0       	breq	.+12     	; 0x100c <__DATA_REGION_LENGTH__+0xc>
    1000:	b7 01       	movw	r22, r14
    1002:	80 e3       	ldi	r24, 0x30	; 48
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	18 d3       	rcall	.+1584   	; 0x1638 <fputc>
    1008:	5a 94       	dec	r5
    100a:	f8 cf       	rjmp	.-16     	; 0xffc <vfprintf+0x2b2>
    100c:	97 fe       	sbrs	r9, 7
    100e:	4a c0       	rjmp	.+148    	; 0x10a4 <__DATA_REGION_LENGTH__+0xa4>
    1010:	46 01       	movw	r8, r12
    1012:	d7 fe       	sbrs	r13, 7
    1014:	02 c0       	rjmp	.+4      	; 0x101a <__DATA_REGION_LENGTH__+0x1a>
    1016:	81 2c       	mov	r8, r1
    1018:	91 2c       	mov	r9, r1
    101a:	c6 01       	movw	r24, r12
    101c:	88 19       	sub	r24, r8
    101e:	99 09       	sbc	r25, r9
    1020:	f3 01       	movw	r30, r6
    1022:	e8 0f       	add	r30, r24
    1024:	f9 1f       	adc	r31, r25
    1026:	fe 87       	std	Y+14, r31	; 0x0e
    1028:	ed 87       	std	Y+13, r30	; 0x0d
    102a:	96 01       	movw	r18, r12
    102c:	24 19       	sub	r18, r4
    102e:	31 09       	sbc	r19, r1
    1030:	38 8b       	std	Y+16, r19	; 0x10
    1032:	2f 87       	std	Y+15, r18	; 0x0f
    1034:	01 2f       	mov	r16, r17
    1036:	10 e0       	ldi	r17, 0x00	; 0
    1038:	11 95       	neg	r17
    103a:	01 95       	neg	r16
    103c:	11 09       	sbc	r17, r1
    103e:	3f ef       	ldi	r19, 0xFF	; 255
    1040:	83 16       	cp	r8, r19
    1042:	93 06       	cpc	r9, r19
    1044:	21 f4       	brne	.+8      	; 0x104e <__DATA_REGION_LENGTH__+0x4e>
    1046:	b7 01       	movw	r22, r14
    1048:	8e e2       	ldi	r24, 0x2E	; 46
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	f5 d2       	rcall	.+1514   	; 0x1638 <fputc>
    104e:	c8 14       	cp	r12, r8
    1050:	d9 04       	cpc	r13, r9
    1052:	4c f0       	brlt	.+18     	; 0x1066 <__DATA_REGION_LENGTH__+0x66>
    1054:	8f 85       	ldd	r24, Y+15	; 0x0f
    1056:	98 89       	ldd	r25, Y+16	; 0x10
    1058:	88 15       	cp	r24, r8
    105a:	99 05       	cpc	r25, r9
    105c:	24 f4       	brge	.+8      	; 0x1066 <__DATA_REGION_LENGTH__+0x66>
    105e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1060:	fe 85       	ldd	r31, Y+14	; 0x0e
    1062:	81 81       	ldd	r24, Z+1	; 0x01
    1064:	01 c0       	rjmp	.+2      	; 0x1068 <__DATA_REGION_LENGTH__+0x68>
    1066:	80 e3       	ldi	r24, 0x30	; 48
    1068:	f1 e0       	ldi	r31, 0x01	; 1
    106a:	8f 1a       	sub	r8, r31
    106c:	91 08       	sbc	r9, r1
    106e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1070:	3e 85       	ldd	r19, Y+14	; 0x0e
    1072:	2f 5f       	subi	r18, 0xFF	; 255
    1074:	3f 4f       	sbci	r19, 0xFF	; 255
    1076:	3e 87       	std	Y+14, r19	; 0x0e
    1078:	2d 87       	std	Y+13, r18	; 0x0d
    107a:	80 16       	cp	r8, r16
    107c:	91 06       	cpc	r9, r17
    107e:	24 f0       	brlt	.+8      	; 0x1088 <__DATA_REGION_LENGTH__+0x88>
    1080:	b7 01       	movw	r22, r14
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	d9 d2       	rcall	.+1458   	; 0x1638 <fputc>
    1086:	db cf       	rjmp	.-74     	; 0x103e <__DATA_REGION_LENGTH__+0x3e>
    1088:	c8 14       	cp	r12, r8
    108a:	d9 04       	cpc	r13, r9
    108c:	41 f4       	brne	.+16     	; 0x109e <__DATA_REGION_LENGTH__+0x9e>
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	96 33       	cpi	r25, 0x36	; 54
    1092:	20 f4       	brcc	.+8      	; 0x109c <__DATA_REGION_LENGTH__+0x9c>
    1094:	95 33       	cpi	r25, 0x35	; 53
    1096:	19 f4       	brne	.+6      	; 0x109e <__DATA_REGION_LENGTH__+0x9e>
    1098:	3c 85       	ldd	r19, Y+12	; 0x0c
    109a:	34 ff       	sbrs	r19, 4
    109c:	81 e3       	ldi	r24, 0x31	; 49
    109e:	b7 01       	movw	r22, r14
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	48 c0       	rjmp	.+144    	; 0x1134 <__stack+0x35>
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	81 33       	cpi	r24, 0x31	; 49
    10a8:	19 f0       	breq	.+6      	; 0x10b0 <__DATA_REGION_LENGTH__+0xb0>
    10aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    10ac:	9f 7e       	andi	r25, 0xEF	; 239
    10ae:	9c 87       	std	Y+12, r25	; 0x0c
    10b0:	b7 01       	movw	r22, r14
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	c1 d2       	rcall	.+1410   	; 0x1638 <fputc>
    10b6:	11 11       	cpse	r17, r1
    10b8:	05 c0       	rjmp	.+10     	; 0x10c4 <__DATA_REGION_LENGTH__+0xc4>
    10ba:	94 fc       	sbrc	r9, 4
    10bc:	16 c0       	rjmp	.+44     	; 0x10ea <__DATA_REGION_LENGTH__+0xea>
    10be:	85 e6       	ldi	r24, 0x65	; 101
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	15 c0       	rjmp	.+42     	; 0x10ee <__DATA_REGION_LENGTH__+0xee>
    10c4:	b7 01       	movw	r22, r14
    10c6:	8e e2       	ldi	r24, 0x2E	; 46
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	b6 d2       	rcall	.+1388   	; 0x1638 <fputc>
    10cc:	1e 5f       	subi	r17, 0xFE	; 254
    10ce:	82 e0       	ldi	r24, 0x02	; 2
    10d0:	01 e0       	ldi	r16, 0x01	; 1
    10d2:	08 0f       	add	r16, r24
    10d4:	f3 01       	movw	r30, r6
    10d6:	e8 0f       	add	r30, r24
    10d8:	f1 1d       	adc	r31, r1
    10da:	80 81       	ld	r24, Z
    10dc:	b7 01       	movw	r22, r14
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	ab d2       	rcall	.+1366   	; 0x1638 <fputc>
    10e2:	80 2f       	mov	r24, r16
    10e4:	01 13       	cpse	r16, r17
    10e6:	f4 cf       	rjmp	.-24     	; 0x10d0 <__DATA_REGION_LENGTH__+0xd0>
    10e8:	e8 cf       	rjmp	.-48     	; 0x10ba <__DATA_REGION_LENGTH__+0xba>
    10ea:	85 e4       	ldi	r24, 0x45	; 69
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	b7 01       	movw	r22, r14
    10f0:	a3 d2       	rcall	.+1350   	; 0x1638 <fputc>
    10f2:	d7 fc       	sbrc	r13, 7
    10f4:	06 c0       	rjmp	.+12     	; 0x1102 <__stack+0x3>
    10f6:	c1 14       	cp	r12, r1
    10f8:	d1 04       	cpc	r13, r1
    10fa:	41 f4       	brne	.+16     	; 0x110c <__stack+0xd>
    10fc:	ec 85       	ldd	r30, Y+12	; 0x0c
    10fe:	e4 ff       	sbrs	r30, 4
    1100:	05 c0       	rjmp	.+10     	; 0x110c <__stack+0xd>
    1102:	d1 94       	neg	r13
    1104:	c1 94       	neg	r12
    1106:	d1 08       	sbc	r13, r1
    1108:	8d e2       	ldi	r24, 0x2D	; 45
    110a:	01 c0       	rjmp	.+2      	; 0x110e <__stack+0xf>
    110c:	8b e2       	ldi	r24, 0x2B	; 43
    110e:	b7 01       	movw	r22, r14
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	92 d2       	rcall	.+1316   	; 0x1638 <fputc>
    1114:	80 e3       	ldi	r24, 0x30	; 48
    1116:	2a e0       	ldi	r18, 0x0A	; 10
    1118:	c2 16       	cp	r12, r18
    111a:	d1 04       	cpc	r13, r1
    111c:	2c f0       	brlt	.+10     	; 0x1128 <__stack+0x29>
    111e:	8f 5f       	subi	r24, 0xFF	; 255
    1120:	fa e0       	ldi	r31, 0x0A	; 10
    1122:	cf 1a       	sub	r12, r31
    1124:	d1 08       	sbc	r13, r1
    1126:	f7 cf       	rjmp	.-18     	; 0x1116 <__stack+0x17>
    1128:	b7 01       	movw	r22, r14
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	85 d2       	rcall	.+1290   	; 0x1638 <fputc>
    112e:	b7 01       	movw	r22, r14
    1130:	c6 01       	movw	r24, r12
    1132:	c0 96       	adiw	r24, 0x30	; 48
    1134:	81 d2       	rcall	.+1282   	; 0x1638 <fputc>
    1136:	49 c1       	rjmp	.+658    	; 0x13ca <__stack+0x2cb>
    1138:	83 36       	cpi	r24, 0x63	; 99
    113a:	31 f0       	breq	.+12     	; 0x1148 <__stack+0x49>
    113c:	83 37       	cpi	r24, 0x73	; 115
    113e:	79 f0       	breq	.+30     	; 0x115e <__stack+0x5f>
    1140:	83 35       	cpi	r24, 0x53	; 83
    1142:	09 f0       	breq	.+2      	; 0x1146 <__stack+0x47>
    1144:	52 c0       	rjmp	.+164    	; 0x11ea <__stack+0xeb>
    1146:	1f c0       	rjmp	.+62     	; 0x1186 <__stack+0x87>
    1148:	56 01       	movw	r10, r12
    114a:	32 e0       	ldi	r19, 0x02	; 2
    114c:	a3 0e       	add	r10, r19
    114e:	b1 1c       	adc	r11, r1
    1150:	f6 01       	movw	r30, r12
    1152:	80 81       	ld	r24, Z
    1154:	89 83       	std	Y+1, r24	; 0x01
    1156:	01 e0       	ldi	r16, 0x01	; 1
    1158:	10 e0       	ldi	r17, 0x00	; 0
    115a:	63 01       	movw	r12, r6
    115c:	11 c0       	rjmp	.+34     	; 0x1180 <__stack+0x81>
    115e:	56 01       	movw	r10, r12
    1160:	f2 e0       	ldi	r31, 0x02	; 2
    1162:	af 0e       	add	r10, r31
    1164:	b1 1c       	adc	r11, r1
    1166:	f6 01       	movw	r30, r12
    1168:	c0 80       	ld	r12, Z
    116a:	d1 80       	ldd	r13, Z+1	; 0x01
    116c:	96 fe       	sbrs	r9, 6
    116e:	03 c0       	rjmp	.+6      	; 0x1176 <__stack+0x77>
    1170:	61 2f       	mov	r22, r17
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	02 c0       	rjmp	.+4      	; 0x117a <__stack+0x7b>
    1176:	6f ef       	ldi	r22, 0xFF	; 255
    1178:	7f ef       	ldi	r23, 0xFF	; 255
    117a:	c6 01       	movw	r24, r12
    117c:	52 d2       	rcall	.+1188   	; 0x1622 <strnlen>
    117e:	8c 01       	movw	r16, r24
    1180:	f9 2d       	mov	r31, r9
    1182:	ff 77       	andi	r31, 0x7F	; 127
    1184:	13 c0       	rjmp	.+38     	; 0x11ac <__stack+0xad>
    1186:	56 01       	movw	r10, r12
    1188:	22 e0       	ldi	r18, 0x02	; 2
    118a:	a2 0e       	add	r10, r18
    118c:	b1 1c       	adc	r11, r1
    118e:	f6 01       	movw	r30, r12
    1190:	c0 80       	ld	r12, Z
    1192:	d1 80       	ldd	r13, Z+1	; 0x01
    1194:	96 fe       	sbrs	r9, 6
    1196:	03 c0       	rjmp	.+6      	; 0x119e <__stack+0x9f>
    1198:	61 2f       	mov	r22, r17
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <__stack+0xa3>
    119e:	6f ef       	ldi	r22, 0xFF	; 255
    11a0:	7f ef       	ldi	r23, 0xFF	; 255
    11a2:	c6 01       	movw	r24, r12
    11a4:	33 d2       	rcall	.+1126   	; 0x160c <strnlen_P>
    11a6:	8c 01       	movw	r16, r24
    11a8:	f9 2d       	mov	r31, r9
    11aa:	f0 68       	ori	r31, 0x80	; 128
    11ac:	9f 2e       	mov	r9, r31
    11ae:	f3 fd       	sbrc	r31, 3
    11b0:	18 c0       	rjmp	.+48     	; 0x11e2 <__stack+0xe3>
    11b2:	85 2d       	mov	r24, r5
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	08 17       	cp	r16, r24
    11b8:	19 07       	cpc	r17, r25
    11ba:	98 f4       	brcc	.+38     	; 0x11e2 <__stack+0xe3>
    11bc:	b7 01       	movw	r22, r14
    11be:	80 e2       	ldi	r24, 0x20	; 32
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	3a d2       	rcall	.+1140   	; 0x1638 <fputc>
    11c4:	5a 94       	dec	r5
    11c6:	f5 cf       	rjmp	.-22     	; 0x11b2 <__stack+0xb3>
    11c8:	f6 01       	movw	r30, r12
    11ca:	97 fc       	sbrc	r9, 7
    11cc:	85 91       	lpm	r24, Z+
    11ce:	97 fe       	sbrs	r9, 7
    11d0:	81 91       	ld	r24, Z+
    11d2:	6f 01       	movw	r12, r30
    11d4:	b7 01       	movw	r22, r14
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	2f d2       	rcall	.+1118   	; 0x1638 <fputc>
    11da:	51 10       	cpse	r5, r1
    11dc:	5a 94       	dec	r5
    11de:	01 50       	subi	r16, 0x01	; 1
    11e0:	11 09       	sbc	r17, r1
    11e2:	01 15       	cp	r16, r1
    11e4:	11 05       	cpc	r17, r1
    11e6:	81 f7       	brne	.-32     	; 0x11c8 <__stack+0xc9>
    11e8:	f0 c0       	rjmp	.+480    	; 0x13ca <__stack+0x2cb>
    11ea:	84 36       	cpi	r24, 0x64	; 100
    11ec:	11 f0       	breq	.+4      	; 0x11f2 <__stack+0xf3>
    11ee:	89 36       	cpi	r24, 0x69	; 105
    11f0:	59 f5       	brne	.+86     	; 0x1248 <__stack+0x149>
    11f2:	56 01       	movw	r10, r12
    11f4:	97 fe       	sbrs	r9, 7
    11f6:	09 c0       	rjmp	.+18     	; 0x120a <__stack+0x10b>
    11f8:	24 e0       	ldi	r18, 0x04	; 4
    11fa:	a2 0e       	add	r10, r18
    11fc:	b1 1c       	adc	r11, r1
    11fe:	f6 01       	movw	r30, r12
    1200:	60 81       	ld	r22, Z
    1202:	71 81       	ldd	r23, Z+1	; 0x01
    1204:	82 81       	ldd	r24, Z+2	; 0x02
    1206:	93 81       	ldd	r25, Z+3	; 0x03
    1208:	0a c0       	rjmp	.+20     	; 0x121e <__stack+0x11f>
    120a:	f2 e0       	ldi	r31, 0x02	; 2
    120c:	af 0e       	add	r10, r31
    120e:	b1 1c       	adc	r11, r1
    1210:	f6 01       	movw	r30, r12
    1212:	60 81       	ld	r22, Z
    1214:	71 81       	ldd	r23, Z+1	; 0x01
    1216:	07 2e       	mov	r0, r23
    1218:	00 0c       	add	r0, r0
    121a:	88 0b       	sbc	r24, r24
    121c:	99 0b       	sbc	r25, r25
    121e:	f9 2d       	mov	r31, r9
    1220:	ff 76       	andi	r31, 0x6F	; 111
    1222:	9f 2e       	mov	r9, r31
    1224:	97 ff       	sbrs	r25, 7
    1226:	09 c0       	rjmp	.+18     	; 0x123a <__stack+0x13b>
    1228:	90 95       	com	r25
    122a:	80 95       	com	r24
    122c:	70 95       	com	r23
    122e:	61 95       	neg	r22
    1230:	7f 4f       	sbci	r23, 0xFF	; 255
    1232:	8f 4f       	sbci	r24, 0xFF	; 255
    1234:	9f 4f       	sbci	r25, 0xFF	; 255
    1236:	f0 68       	ori	r31, 0x80	; 128
    1238:	9f 2e       	mov	r9, r31
    123a:	2a e0       	ldi	r18, 0x0A	; 10
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	a3 01       	movw	r20, r6
    1240:	37 d2       	rcall	.+1134   	; 0x16b0 <__ultoa_invert>
    1242:	c8 2e       	mov	r12, r24
    1244:	c6 18       	sub	r12, r6
    1246:	3e c0       	rjmp	.+124    	; 0x12c4 <__stack+0x1c5>
    1248:	09 2d       	mov	r16, r9
    124a:	85 37       	cpi	r24, 0x75	; 117
    124c:	21 f4       	brne	.+8      	; 0x1256 <__stack+0x157>
    124e:	0f 7e       	andi	r16, 0xEF	; 239
    1250:	2a e0       	ldi	r18, 0x0A	; 10
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	1d c0       	rjmp	.+58     	; 0x1290 <__stack+0x191>
    1256:	09 7f       	andi	r16, 0xF9	; 249
    1258:	8f 36       	cpi	r24, 0x6F	; 111
    125a:	91 f0       	breq	.+36     	; 0x1280 <__stack+0x181>
    125c:	18 f4       	brcc	.+6      	; 0x1264 <__stack+0x165>
    125e:	88 35       	cpi	r24, 0x58	; 88
    1260:	59 f0       	breq	.+22     	; 0x1278 <__stack+0x179>
    1262:	bc c0       	rjmp	.+376    	; 0x13dc <__stack+0x2dd>
    1264:	80 37       	cpi	r24, 0x70	; 112
    1266:	19 f0       	breq	.+6      	; 0x126e <__stack+0x16f>
    1268:	88 37       	cpi	r24, 0x78	; 120
    126a:	11 f0       	breq	.+4      	; 0x1270 <__stack+0x171>
    126c:	b7 c0       	rjmp	.+366    	; 0x13dc <__stack+0x2dd>
    126e:	00 61       	ori	r16, 0x10	; 16
    1270:	04 ff       	sbrs	r16, 4
    1272:	09 c0       	rjmp	.+18     	; 0x1286 <__stack+0x187>
    1274:	04 60       	ori	r16, 0x04	; 4
    1276:	07 c0       	rjmp	.+14     	; 0x1286 <__stack+0x187>
    1278:	94 fe       	sbrs	r9, 4
    127a:	08 c0       	rjmp	.+16     	; 0x128c <__stack+0x18d>
    127c:	06 60       	ori	r16, 0x06	; 6
    127e:	06 c0       	rjmp	.+12     	; 0x128c <__stack+0x18d>
    1280:	28 e0       	ldi	r18, 0x08	; 8
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	05 c0       	rjmp	.+10     	; 0x1290 <__stack+0x191>
    1286:	20 e1       	ldi	r18, 0x10	; 16
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <__stack+0x191>
    128c:	20 e1       	ldi	r18, 0x10	; 16
    128e:	32 e0       	ldi	r19, 0x02	; 2
    1290:	56 01       	movw	r10, r12
    1292:	07 ff       	sbrs	r16, 7
    1294:	09 c0       	rjmp	.+18     	; 0x12a8 <__stack+0x1a9>
    1296:	84 e0       	ldi	r24, 0x04	; 4
    1298:	a8 0e       	add	r10, r24
    129a:	b1 1c       	adc	r11, r1
    129c:	f6 01       	movw	r30, r12
    129e:	60 81       	ld	r22, Z
    12a0:	71 81       	ldd	r23, Z+1	; 0x01
    12a2:	82 81       	ldd	r24, Z+2	; 0x02
    12a4:	93 81       	ldd	r25, Z+3	; 0x03
    12a6:	08 c0       	rjmp	.+16     	; 0x12b8 <__stack+0x1b9>
    12a8:	f2 e0       	ldi	r31, 0x02	; 2
    12aa:	af 0e       	add	r10, r31
    12ac:	b1 1c       	adc	r11, r1
    12ae:	f6 01       	movw	r30, r12
    12b0:	60 81       	ld	r22, Z
    12b2:	71 81       	ldd	r23, Z+1	; 0x01
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	a3 01       	movw	r20, r6
    12ba:	fa d1       	rcall	.+1012   	; 0x16b0 <__ultoa_invert>
    12bc:	c8 2e       	mov	r12, r24
    12be:	c6 18       	sub	r12, r6
    12c0:	0f 77       	andi	r16, 0x7F	; 127
    12c2:	90 2e       	mov	r9, r16
    12c4:	96 fe       	sbrs	r9, 6
    12c6:	0b c0       	rjmp	.+22     	; 0x12de <__stack+0x1df>
    12c8:	09 2d       	mov	r16, r9
    12ca:	0e 7f       	andi	r16, 0xFE	; 254
    12cc:	c1 16       	cp	r12, r17
    12ce:	50 f4       	brcc	.+20     	; 0x12e4 <__stack+0x1e5>
    12d0:	94 fe       	sbrs	r9, 4
    12d2:	0a c0       	rjmp	.+20     	; 0x12e8 <__stack+0x1e9>
    12d4:	92 fc       	sbrc	r9, 2
    12d6:	08 c0       	rjmp	.+16     	; 0x12e8 <__stack+0x1e9>
    12d8:	09 2d       	mov	r16, r9
    12da:	0e 7e       	andi	r16, 0xEE	; 238
    12dc:	05 c0       	rjmp	.+10     	; 0x12e8 <__stack+0x1e9>
    12de:	dc 2c       	mov	r13, r12
    12e0:	09 2d       	mov	r16, r9
    12e2:	03 c0       	rjmp	.+6      	; 0x12ea <__stack+0x1eb>
    12e4:	dc 2c       	mov	r13, r12
    12e6:	01 c0       	rjmp	.+2      	; 0x12ea <__stack+0x1eb>
    12e8:	d1 2e       	mov	r13, r17
    12ea:	04 ff       	sbrs	r16, 4
    12ec:	0d c0       	rjmp	.+26     	; 0x1308 <__stack+0x209>
    12ee:	fe 01       	movw	r30, r28
    12f0:	ec 0d       	add	r30, r12
    12f2:	f1 1d       	adc	r31, r1
    12f4:	80 81       	ld	r24, Z
    12f6:	80 33       	cpi	r24, 0x30	; 48
    12f8:	11 f4       	brne	.+4      	; 0x12fe <__stack+0x1ff>
    12fa:	09 7e       	andi	r16, 0xE9	; 233
    12fc:	09 c0       	rjmp	.+18     	; 0x1310 <__stack+0x211>
    12fe:	02 ff       	sbrs	r16, 2
    1300:	06 c0       	rjmp	.+12     	; 0x130e <__stack+0x20f>
    1302:	d3 94       	inc	r13
    1304:	d3 94       	inc	r13
    1306:	04 c0       	rjmp	.+8      	; 0x1310 <__stack+0x211>
    1308:	80 2f       	mov	r24, r16
    130a:	86 78       	andi	r24, 0x86	; 134
    130c:	09 f0       	breq	.+2      	; 0x1310 <__stack+0x211>
    130e:	d3 94       	inc	r13
    1310:	03 fd       	sbrc	r16, 3
    1312:	10 c0       	rjmp	.+32     	; 0x1334 <__stack+0x235>
    1314:	00 ff       	sbrs	r16, 0
    1316:	06 c0       	rjmp	.+12     	; 0x1324 <__stack+0x225>
    1318:	1c 2d       	mov	r17, r12
    131a:	d5 14       	cp	r13, r5
    131c:	78 f4       	brcc	.+30     	; 0x133c <__stack+0x23d>
    131e:	15 0d       	add	r17, r5
    1320:	1d 19       	sub	r17, r13
    1322:	0c c0       	rjmp	.+24     	; 0x133c <__stack+0x23d>
    1324:	d5 14       	cp	r13, r5
    1326:	50 f4       	brcc	.+20     	; 0x133c <__stack+0x23d>
    1328:	b7 01       	movw	r22, r14
    132a:	80 e2       	ldi	r24, 0x20	; 32
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	84 d1       	rcall	.+776    	; 0x1638 <fputc>
    1330:	d3 94       	inc	r13
    1332:	f8 cf       	rjmp	.-16     	; 0x1324 <__stack+0x225>
    1334:	d5 14       	cp	r13, r5
    1336:	10 f4       	brcc	.+4      	; 0x133c <__stack+0x23d>
    1338:	5d 18       	sub	r5, r13
    133a:	01 c0       	rjmp	.+2      	; 0x133e <__stack+0x23f>
    133c:	51 2c       	mov	r5, r1
    133e:	04 ff       	sbrs	r16, 4
    1340:	0f c0       	rjmp	.+30     	; 0x1360 <__stack+0x261>
    1342:	b7 01       	movw	r22, r14
    1344:	80 e3       	ldi	r24, 0x30	; 48
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	77 d1       	rcall	.+750    	; 0x1638 <fputc>
    134a:	02 ff       	sbrs	r16, 2
    134c:	16 c0       	rjmp	.+44     	; 0x137a <__stack+0x27b>
    134e:	01 fd       	sbrc	r16, 1
    1350:	03 c0       	rjmp	.+6      	; 0x1358 <__stack+0x259>
    1352:	88 e7       	ldi	r24, 0x78	; 120
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 c0       	rjmp	.+4      	; 0x135c <__stack+0x25d>
    1358:	88 e5       	ldi	r24, 0x58	; 88
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	b7 01       	movw	r22, r14
    135e:	0c c0       	rjmp	.+24     	; 0x1378 <__stack+0x279>
    1360:	80 2f       	mov	r24, r16
    1362:	86 78       	andi	r24, 0x86	; 134
    1364:	51 f0       	breq	.+20     	; 0x137a <__stack+0x27b>
    1366:	01 ff       	sbrs	r16, 1
    1368:	02 c0       	rjmp	.+4      	; 0x136e <__stack+0x26f>
    136a:	8b e2       	ldi	r24, 0x2B	; 43
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <__stack+0x271>
    136e:	80 e2       	ldi	r24, 0x20	; 32
    1370:	07 fd       	sbrc	r16, 7
    1372:	8d e2       	ldi	r24, 0x2D	; 45
    1374:	b7 01       	movw	r22, r14
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	5f d1       	rcall	.+702    	; 0x1638 <fputc>
    137a:	c1 16       	cp	r12, r17
    137c:	30 f4       	brcc	.+12     	; 0x138a <__stack+0x28b>
    137e:	b7 01       	movw	r22, r14
    1380:	80 e3       	ldi	r24, 0x30	; 48
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	59 d1       	rcall	.+690    	; 0x1638 <fputc>
    1386:	11 50       	subi	r17, 0x01	; 1
    1388:	f8 cf       	rjmp	.-16     	; 0x137a <__stack+0x27b>
    138a:	ca 94       	dec	r12
    138c:	f3 01       	movw	r30, r6
    138e:	ec 0d       	add	r30, r12
    1390:	f1 1d       	adc	r31, r1
    1392:	80 81       	ld	r24, Z
    1394:	b7 01       	movw	r22, r14
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	4f d1       	rcall	.+670    	; 0x1638 <fputc>
    139a:	c1 10       	cpse	r12, r1
    139c:	f6 cf       	rjmp	.-20     	; 0x138a <__stack+0x28b>
    139e:	15 c0       	rjmp	.+42     	; 0x13ca <__stack+0x2cb>
    13a0:	f4 e0       	ldi	r31, 0x04	; 4
    13a2:	f5 15       	cp	r31, r5
    13a4:	50 f5       	brcc	.+84     	; 0x13fa <__stack+0x2fb>
    13a6:	84 e0       	ldi	r24, 0x04	; 4
    13a8:	58 1a       	sub	r5, r24
    13aa:	93 fe       	sbrs	r9, 3
    13ac:	1e c0       	rjmp	.+60     	; 0x13ea <__stack+0x2eb>
    13ae:	01 11       	cpse	r16, r1
    13b0:	25 c0       	rjmp	.+74     	; 0x13fc <__stack+0x2fd>
    13b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    13b4:	23 ff       	sbrs	r18, 3
    13b6:	27 c0       	rjmp	.+78     	; 0x1406 <__stack+0x307>
    13b8:	0c e8       	ldi	r16, 0x8C	; 140
    13ba:	10 e0       	ldi	r17, 0x00	; 0
    13bc:	39 2d       	mov	r19, r9
    13be:	30 71       	andi	r19, 0x10	; 16
    13c0:	93 2e       	mov	r9, r19
    13c2:	f8 01       	movw	r30, r16
    13c4:	84 91       	lpm	r24, Z
    13c6:	81 11       	cpse	r24, r1
    13c8:	21 c0       	rjmp	.+66     	; 0x140c <__stack+0x30d>
    13ca:	55 20       	and	r5, r5
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <__stack+0x2d1>
    13ce:	fc cc       	rjmp	.-1544   	; 0xdc8 <vfprintf+0x7e>
    13d0:	b7 01       	movw	r22, r14
    13d2:	80 e2       	ldi	r24, 0x20	; 32
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	30 d1       	rcall	.+608    	; 0x1638 <fputc>
    13d8:	5a 94       	dec	r5
    13da:	f7 cf       	rjmp	.-18     	; 0x13ca <__stack+0x2cb>
    13dc:	f7 01       	movw	r30, r14
    13de:	86 81       	ldd	r24, Z+6	; 0x06
    13e0:	97 81       	ldd	r25, Z+7	; 0x07
    13e2:	23 c0       	rjmp	.+70     	; 0x142a <__stack+0x32b>
    13e4:	8f ef       	ldi	r24, 0xFF	; 255
    13e6:	9f ef       	ldi	r25, 0xFF	; 255
    13e8:	20 c0       	rjmp	.+64     	; 0x142a <__stack+0x32b>
    13ea:	b7 01       	movw	r22, r14
    13ec:	80 e2       	ldi	r24, 0x20	; 32
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	23 d1       	rcall	.+582    	; 0x1638 <fputc>
    13f2:	5a 94       	dec	r5
    13f4:	51 10       	cpse	r5, r1
    13f6:	f9 cf       	rjmp	.-14     	; 0x13ea <__stack+0x2eb>
    13f8:	da cf       	rjmp	.-76     	; 0x13ae <__stack+0x2af>
    13fa:	51 2c       	mov	r5, r1
    13fc:	b7 01       	movw	r22, r14
    13fe:	80 2f       	mov	r24, r16
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	1a d1       	rcall	.+564    	; 0x1638 <fputc>
    1404:	d6 cf       	rjmp	.-84     	; 0x13b2 <__stack+0x2b3>
    1406:	00 e9       	ldi	r16, 0x90	; 144
    1408:	10 e0       	ldi	r17, 0x00	; 0
    140a:	d8 cf       	rjmp	.-80     	; 0x13bc <__stack+0x2bd>
    140c:	91 10       	cpse	r9, r1
    140e:	80 52       	subi	r24, 0x20	; 32
    1410:	b7 01       	movw	r22, r14
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	11 d1       	rcall	.+546    	; 0x1638 <fputc>
    1416:	0f 5f       	subi	r16, 0xFF	; 255
    1418:	1f 4f       	sbci	r17, 0xFF	; 255
    141a:	d3 cf       	rjmp	.-90     	; 0x13c2 <__stack+0x2c3>
    141c:	23 e0       	ldi	r18, 0x03	; 3
    141e:	25 15       	cp	r18, r5
    1420:	10 f4       	brcc	.+4      	; 0x1426 <__stack+0x327>
    1422:	83 e0       	ldi	r24, 0x03	; 3
    1424:	c1 cf       	rjmp	.-126    	; 0x13a8 <__stack+0x2a9>
    1426:	51 2c       	mov	r5, r1
    1428:	c4 cf       	rjmp	.-120    	; 0x13b2 <__stack+0x2b3>
    142a:	60 96       	adiw	r28, 0x10	; 16
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	f8 94       	cli
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	cd bf       	out	0x3d, r28	; 61
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	1f 91       	pop	r17
    143c:	0f 91       	pop	r16
    143e:	ff 90       	pop	r15
    1440:	ef 90       	pop	r14
    1442:	df 90       	pop	r13
    1444:	cf 90       	pop	r12
    1446:	bf 90       	pop	r11
    1448:	af 90       	pop	r10
    144a:	9f 90       	pop	r9
    144c:	8f 90       	pop	r8
    144e:	7f 90       	pop	r7
    1450:	6f 90       	pop	r6
    1452:	5f 90       	pop	r5
    1454:	4f 90       	pop	r4
    1456:	3f 90       	pop	r3
    1458:	2f 90       	pop	r2
    145a:	08 95       	ret

0000145c <__ftoa_engine>:
    145c:	28 30       	cpi	r18, 0x08	; 8
    145e:	08 f0       	brcs	.+2      	; 0x1462 <__ftoa_engine+0x6>
    1460:	27 e0       	ldi	r18, 0x07	; 7
    1462:	33 27       	eor	r19, r19
    1464:	da 01       	movw	r26, r20
    1466:	99 0f       	add	r25, r25
    1468:	31 1d       	adc	r19, r1
    146a:	87 fd       	sbrc	r24, 7
    146c:	91 60       	ori	r25, 0x01	; 1
    146e:	00 96       	adiw	r24, 0x00	; 0
    1470:	61 05       	cpc	r22, r1
    1472:	71 05       	cpc	r23, r1
    1474:	39 f4       	brne	.+14     	; 0x1484 <__ftoa_engine+0x28>
    1476:	32 60       	ori	r19, 0x02	; 2
    1478:	2e 5f       	subi	r18, 0xFE	; 254
    147a:	3d 93       	st	X+, r19
    147c:	30 e3       	ldi	r19, 0x30	; 48
    147e:	2a 95       	dec	r18
    1480:	e1 f7       	brne	.-8      	; 0x147a <__ftoa_engine+0x1e>
    1482:	08 95       	ret
    1484:	9f 3f       	cpi	r25, 0xFF	; 255
    1486:	30 f0       	brcs	.+12     	; 0x1494 <__ftoa_engine+0x38>
    1488:	80 38       	cpi	r24, 0x80	; 128
    148a:	71 05       	cpc	r23, r1
    148c:	61 05       	cpc	r22, r1
    148e:	09 f0       	breq	.+2      	; 0x1492 <__ftoa_engine+0x36>
    1490:	3c 5f       	subi	r19, 0xFC	; 252
    1492:	3c 5f       	subi	r19, 0xFC	; 252
    1494:	3d 93       	st	X+, r19
    1496:	91 30       	cpi	r25, 0x01	; 1
    1498:	08 f0       	brcs	.+2      	; 0x149c <__ftoa_engine+0x40>
    149a:	80 68       	ori	r24, 0x80	; 128
    149c:	91 1d       	adc	r25, r1
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	1f 93       	push	r17
    14a4:	0f 93       	push	r16
    14a6:	ff 92       	push	r15
    14a8:	ef 92       	push	r14
    14aa:	19 2f       	mov	r17, r25
    14ac:	98 7f       	andi	r25, 0xF8	; 248
    14ae:	96 95       	lsr	r25
    14b0:	e9 2f       	mov	r30, r25
    14b2:	96 95       	lsr	r25
    14b4:	96 95       	lsr	r25
    14b6:	e9 0f       	add	r30, r25
    14b8:	ff 27       	eor	r31, r31
    14ba:	e2 51       	subi	r30, 0x12	; 18
    14bc:	ff 4f       	sbci	r31, 0xFF	; 255
    14be:	99 27       	eor	r25, r25
    14c0:	33 27       	eor	r19, r19
    14c2:	ee 24       	eor	r14, r14
    14c4:	ff 24       	eor	r15, r15
    14c6:	a7 01       	movw	r20, r14
    14c8:	e7 01       	movw	r28, r14
    14ca:	05 90       	lpm	r0, Z+
    14cc:	08 94       	sec
    14ce:	07 94       	ror	r0
    14d0:	28 f4       	brcc	.+10     	; 0x14dc <__ftoa_engine+0x80>
    14d2:	36 0f       	add	r19, r22
    14d4:	e7 1e       	adc	r14, r23
    14d6:	f8 1e       	adc	r15, r24
    14d8:	49 1f       	adc	r20, r25
    14da:	51 1d       	adc	r21, r1
    14dc:	66 0f       	add	r22, r22
    14de:	77 1f       	adc	r23, r23
    14e0:	88 1f       	adc	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	06 94       	lsr	r0
    14e6:	a1 f7       	brne	.-24     	; 0x14d0 <__ftoa_engine+0x74>
    14e8:	05 90       	lpm	r0, Z+
    14ea:	07 94       	ror	r0
    14ec:	28 f4       	brcc	.+10     	; 0x14f8 <__ftoa_engine+0x9c>
    14ee:	e7 0e       	add	r14, r23
    14f0:	f8 1e       	adc	r15, r24
    14f2:	49 1f       	adc	r20, r25
    14f4:	56 1f       	adc	r21, r22
    14f6:	c1 1d       	adc	r28, r1
    14f8:	77 0f       	add	r23, r23
    14fa:	88 1f       	adc	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	66 1f       	adc	r22, r22
    1500:	06 94       	lsr	r0
    1502:	a1 f7       	brne	.-24     	; 0x14ec <__ftoa_engine+0x90>
    1504:	05 90       	lpm	r0, Z+
    1506:	07 94       	ror	r0
    1508:	28 f4       	brcc	.+10     	; 0x1514 <__ftoa_engine+0xb8>
    150a:	f8 0e       	add	r15, r24
    150c:	49 1f       	adc	r20, r25
    150e:	56 1f       	adc	r21, r22
    1510:	c7 1f       	adc	r28, r23
    1512:	d1 1d       	adc	r29, r1
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	66 1f       	adc	r22, r22
    151a:	77 1f       	adc	r23, r23
    151c:	06 94       	lsr	r0
    151e:	a1 f7       	brne	.-24     	; 0x1508 <__ftoa_engine+0xac>
    1520:	05 90       	lpm	r0, Z+
    1522:	07 94       	ror	r0
    1524:	20 f4       	brcc	.+8      	; 0x152e <__ftoa_engine+0xd2>
    1526:	49 0f       	add	r20, r25
    1528:	56 1f       	adc	r21, r22
    152a:	c7 1f       	adc	r28, r23
    152c:	d8 1f       	adc	r29, r24
    152e:	99 0f       	add	r25, r25
    1530:	66 1f       	adc	r22, r22
    1532:	77 1f       	adc	r23, r23
    1534:	88 1f       	adc	r24, r24
    1536:	06 94       	lsr	r0
    1538:	a9 f7       	brne	.-22     	; 0x1524 <__ftoa_engine+0xc8>
    153a:	84 91       	lpm	r24, Z
    153c:	10 95       	com	r17
    153e:	17 70       	andi	r17, 0x07	; 7
    1540:	41 f0       	breq	.+16     	; 0x1552 <__ftoa_engine+0xf6>
    1542:	d6 95       	lsr	r29
    1544:	c7 95       	ror	r28
    1546:	57 95       	ror	r21
    1548:	47 95       	ror	r20
    154a:	f7 94       	ror	r15
    154c:	e7 94       	ror	r14
    154e:	1a 95       	dec	r17
    1550:	c1 f7       	brne	.-16     	; 0x1542 <__ftoa_engine+0xe6>
    1552:	e4 e9       	ldi	r30, 0x94	; 148
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	68 94       	set
    1558:	15 90       	lpm	r1, Z+
    155a:	15 91       	lpm	r17, Z+
    155c:	35 91       	lpm	r19, Z+
    155e:	65 91       	lpm	r22, Z+
    1560:	95 91       	lpm	r25, Z+
    1562:	05 90       	lpm	r0, Z+
    1564:	7f e2       	ldi	r23, 0x2F	; 47
    1566:	73 95       	inc	r23
    1568:	e1 18       	sub	r14, r1
    156a:	f1 0a       	sbc	r15, r17
    156c:	43 0b       	sbc	r20, r19
    156e:	56 0b       	sbc	r21, r22
    1570:	c9 0b       	sbc	r28, r25
    1572:	d0 09       	sbc	r29, r0
    1574:	c0 f7       	brcc	.-16     	; 0x1566 <__ftoa_engine+0x10a>
    1576:	e1 0c       	add	r14, r1
    1578:	f1 1e       	adc	r15, r17
    157a:	43 1f       	adc	r20, r19
    157c:	56 1f       	adc	r21, r22
    157e:	c9 1f       	adc	r28, r25
    1580:	d0 1d       	adc	r29, r0
    1582:	7e f4       	brtc	.+30     	; 0x15a2 <__ftoa_engine+0x146>
    1584:	70 33       	cpi	r23, 0x30	; 48
    1586:	11 f4       	brne	.+4      	; 0x158c <__ftoa_engine+0x130>
    1588:	8a 95       	dec	r24
    158a:	e6 cf       	rjmp	.-52     	; 0x1558 <__ftoa_engine+0xfc>
    158c:	e8 94       	clt
    158e:	01 50       	subi	r16, 0x01	; 1
    1590:	30 f0       	brcs	.+12     	; 0x159e <__ftoa_engine+0x142>
    1592:	08 0f       	add	r16, r24
    1594:	0a f4       	brpl	.+2      	; 0x1598 <__ftoa_engine+0x13c>
    1596:	00 27       	eor	r16, r16
    1598:	02 17       	cp	r16, r18
    159a:	08 f4       	brcc	.+2      	; 0x159e <__ftoa_engine+0x142>
    159c:	20 2f       	mov	r18, r16
    159e:	23 95       	inc	r18
    15a0:	02 2f       	mov	r16, r18
    15a2:	7a 33       	cpi	r23, 0x3A	; 58
    15a4:	28 f0       	brcs	.+10     	; 0x15b0 <__ftoa_engine+0x154>
    15a6:	79 e3       	ldi	r23, 0x39	; 57
    15a8:	7d 93       	st	X+, r23
    15aa:	2a 95       	dec	r18
    15ac:	e9 f7       	brne	.-6      	; 0x15a8 <__ftoa_engine+0x14c>
    15ae:	10 c0       	rjmp	.+32     	; 0x15d0 <__ftoa_engine+0x174>
    15b0:	7d 93       	st	X+, r23
    15b2:	2a 95       	dec	r18
    15b4:	89 f6       	brne	.-94     	; 0x1558 <__ftoa_engine+0xfc>
    15b6:	06 94       	lsr	r0
    15b8:	97 95       	ror	r25
    15ba:	67 95       	ror	r22
    15bc:	37 95       	ror	r19
    15be:	17 95       	ror	r17
    15c0:	17 94       	ror	r1
    15c2:	e1 18       	sub	r14, r1
    15c4:	f1 0a       	sbc	r15, r17
    15c6:	43 0b       	sbc	r20, r19
    15c8:	56 0b       	sbc	r21, r22
    15ca:	c9 0b       	sbc	r28, r25
    15cc:	d0 09       	sbc	r29, r0
    15ce:	98 f0       	brcs	.+38     	; 0x15f6 <__ftoa_engine+0x19a>
    15d0:	23 95       	inc	r18
    15d2:	7e 91       	ld	r23, -X
    15d4:	73 95       	inc	r23
    15d6:	7a 33       	cpi	r23, 0x3A	; 58
    15d8:	08 f0       	brcs	.+2      	; 0x15dc <__ftoa_engine+0x180>
    15da:	70 e3       	ldi	r23, 0x30	; 48
    15dc:	7c 93       	st	X, r23
    15de:	20 13       	cpse	r18, r16
    15e0:	b8 f7       	brcc	.-18     	; 0x15d0 <__ftoa_engine+0x174>
    15e2:	7e 91       	ld	r23, -X
    15e4:	70 61       	ori	r23, 0x10	; 16
    15e6:	7d 93       	st	X+, r23
    15e8:	30 f0       	brcs	.+12     	; 0x15f6 <__ftoa_engine+0x19a>
    15ea:	83 95       	inc	r24
    15ec:	71 e3       	ldi	r23, 0x31	; 49
    15ee:	7d 93       	st	X+, r23
    15f0:	70 e3       	ldi	r23, 0x30	; 48
    15f2:	2a 95       	dec	r18
    15f4:	e1 f7       	brne	.-8      	; 0x15ee <__ftoa_engine+0x192>
    15f6:	11 24       	eor	r1, r1
    15f8:	ef 90       	pop	r14
    15fa:	ff 90       	pop	r15
    15fc:	0f 91       	pop	r16
    15fe:	1f 91       	pop	r17
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	99 27       	eor	r25, r25
    1606:	87 fd       	sbrc	r24, 7
    1608:	90 95       	com	r25
    160a:	08 95       	ret

0000160c <strnlen_P>:
    160c:	fc 01       	movw	r30, r24
    160e:	05 90       	lpm	r0, Z+
    1610:	61 50       	subi	r22, 0x01	; 1
    1612:	70 40       	sbci	r23, 0x00	; 0
    1614:	01 10       	cpse	r0, r1
    1616:	d8 f7       	brcc	.-10     	; 0x160e <strnlen_P+0x2>
    1618:	80 95       	com	r24
    161a:	90 95       	com	r25
    161c:	8e 0f       	add	r24, r30
    161e:	9f 1f       	adc	r25, r31
    1620:	08 95       	ret

00001622 <strnlen>:
    1622:	fc 01       	movw	r30, r24
    1624:	61 50       	subi	r22, 0x01	; 1
    1626:	70 40       	sbci	r23, 0x00	; 0
    1628:	01 90       	ld	r0, Z+
    162a:	01 10       	cpse	r0, r1
    162c:	d8 f7       	brcc	.-10     	; 0x1624 <strnlen+0x2>
    162e:	80 95       	com	r24
    1630:	90 95       	com	r25
    1632:	8e 0f       	add	r24, r30
    1634:	9f 1f       	adc	r25, r31
    1636:	08 95       	ret

00001638 <fputc>:
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	cf 93       	push	r28
    163e:	df 93       	push	r29
    1640:	fb 01       	movw	r30, r22
    1642:	23 81       	ldd	r18, Z+3	; 0x03
    1644:	21 fd       	sbrc	r18, 1
    1646:	03 c0       	rjmp	.+6      	; 0x164e <fputc+0x16>
    1648:	8f ef       	ldi	r24, 0xFF	; 255
    164a:	9f ef       	ldi	r25, 0xFF	; 255
    164c:	2c c0       	rjmp	.+88     	; 0x16a6 <fputc+0x6e>
    164e:	22 ff       	sbrs	r18, 2
    1650:	16 c0       	rjmp	.+44     	; 0x167e <fputc+0x46>
    1652:	46 81       	ldd	r20, Z+6	; 0x06
    1654:	57 81       	ldd	r21, Z+7	; 0x07
    1656:	24 81       	ldd	r18, Z+4	; 0x04
    1658:	35 81       	ldd	r19, Z+5	; 0x05
    165a:	42 17       	cp	r20, r18
    165c:	53 07       	cpc	r21, r19
    165e:	44 f4       	brge	.+16     	; 0x1670 <fputc+0x38>
    1660:	a0 81       	ld	r26, Z
    1662:	b1 81       	ldd	r27, Z+1	; 0x01
    1664:	9d 01       	movw	r18, r26
    1666:	2f 5f       	subi	r18, 0xFF	; 255
    1668:	3f 4f       	sbci	r19, 0xFF	; 255
    166a:	31 83       	std	Z+1, r19	; 0x01
    166c:	20 83       	st	Z, r18
    166e:	8c 93       	st	X, r24
    1670:	26 81       	ldd	r18, Z+6	; 0x06
    1672:	37 81       	ldd	r19, Z+7	; 0x07
    1674:	2f 5f       	subi	r18, 0xFF	; 255
    1676:	3f 4f       	sbci	r19, 0xFF	; 255
    1678:	37 83       	std	Z+7, r19	; 0x07
    167a:	26 83       	std	Z+6, r18	; 0x06
    167c:	14 c0       	rjmp	.+40     	; 0x16a6 <fputc+0x6e>
    167e:	8b 01       	movw	r16, r22
    1680:	ec 01       	movw	r28, r24
    1682:	fb 01       	movw	r30, r22
    1684:	00 84       	ldd	r0, Z+8	; 0x08
    1686:	f1 85       	ldd	r31, Z+9	; 0x09
    1688:	e0 2d       	mov	r30, r0
    168a:	09 95       	icall
    168c:	89 2b       	or	r24, r25
    168e:	e1 f6       	brne	.-72     	; 0x1648 <fputc+0x10>
    1690:	d8 01       	movw	r26, r16
    1692:	16 96       	adiw	r26, 0x06	; 6
    1694:	8d 91       	ld	r24, X+
    1696:	9c 91       	ld	r25, X
    1698:	17 97       	sbiw	r26, 0x07	; 7
    169a:	01 96       	adiw	r24, 0x01	; 1
    169c:	17 96       	adiw	r26, 0x07	; 7
    169e:	9c 93       	st	X, r25
    16a0:	8e 93       	st	-X, r24
    16a2:	16 97       	sbiw	r26, 0x06	; 6
    16a4:	ce 01       	movw	r24, r28
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	08 95       	ret

000016b0 <__ultoa_invert>:
    16b0:	fa 01       	movw	r30, r20
    16b2:	aa 27       	eor	r26, r26
    16b4:	28 30       	cpi	r18, 0x08	; 8
    16b6:	51 f1       	breq	.+84     	; 0x170c <__ultoa_invert+0x5c>
    16b8:	20 31       	cpi	r18, 0x10	; 16
    16ba:	81 f1       	breq	.+96     	; 0x171c <__ultoa_invert+0x6c>
    16bc:	e8 94       	clt
    16be:	6f 93       	push	r22
    16c0:	6e 7f       	andi	r22, 0xFE	; 254
    16c2:	6e 5f       	subi	r22, 0xFE	; 254
    16c4:	7f 4f       	sbci	r23, 0xFF	; 255
    16c6:	8f 4f       	sbci	r24, 0xFF	; 255
    16c8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ca:	af 4f       	sbci	r26, 0xFF	; 255
    16cc:	b1 e0       	ldi	r27, 0x01	; 1
    16ce:	3e d0       	rcall	.+124    	; 0x174c <__ultoa_invert+0x9c>
    16d0:	b4 e0       	ldi	r27, 0x04	; 4
    16d2:	3c d0       	rcall	.+120    	; 0x174c <__ultoa_invert+0x9c>
    16d4:	67 0f       	add	r22, r23
    16d6:	78 1f       	adc	r23, r24
    16d8:	89 1f       	adc	r24, r25
    16da:	9a 1f       	adc	r25, r26
    16dc:	a1 1d       	adc	r26, r1
    16de:	68 0f       	add	r22, r24
    16e0:	79 1f       	adc	r23, r25
    16e2:	8a 1f       	adc	r24, r26
    16e4:	91 1d       	adc	r25, r1
    16e6:	a1 1d       	adc	r26, r1
    16e8:	6a 0f       	add	r22, r26
    16ea:	71 1d       	adc	r23, r1
    16ec:	81 1d       	adc	r24, r1
    16ee:	91 1d       	adc	r25, r1
    16f0:	a1 1d       	adc	r26, r1
    16f2:	20 d0       	rcall	.+64     	; 0x1734 <__ultoa_invert+0x84>
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <__ultoa_invert+0x48>
    16f6:	68 94       	set
    16f8:	3f 91       	pop	r19
    16fa:	2a e0       	ldi	r18, 0x0A	; 10
    16fc:	26 9f       	mul	r18, r22
    16fe:	11 24       	eor	r1, r1
    1700:	30 19       	sub	r19, r0
    1702:	30 5d       	subi	r19, 0xD0	; 208
    1704:	31 93       	st	Z+, r19
    1706:	de f6       	brtc	.-74     	; 0x16be <__ultoa_invert+0xe>
    1708:	cf 01       	movw	r24, r30
    170a:	08 95       	ret
    170c:	46 2f       	mov	r20, r22
    170e:	47 70       	andi	r20, 0x07	; 7
    1710:	40 5d       	subi	r20, 0xD0	; 208
    1712:	41 93       	st	Z+, r20
    1714:	b3 e0       	ldi	r27, 0x03	; 3
    1716:	0f d0       	rcall	.+30     	; 0x1736 <__ultoa_invert+0x86>
    1718:	c9 f7       	brne	.-14     	; 0x170c <__ultoa_invert+0x5c>
    171a:	f6 cf       	rjmp	.-20     	; 0x1708 <__ultoa_invert+0x58>
    171c:	46 2f       	mov	r20, r22
    171e:	4f 70       	andi	r20, 0x0F	; 15
    1720:	40 5d       	subi	r20, 0xD0	; 208
    1722:	4a 33       	cpi	r20, 0x3A	; 58
    1724:	18 f0       	brcs	.+6      	; 0x172c <__ultoa_invert+0x7c>
    1726:	49 5d       	subi	r20, 0xD9	; 217
    1728:	31 fd       	sbrc	r19, 1
    172a:	40 52       	subi	r20, 0x20	; 32
    172c:	41 93       	st	Z+, r20
    172e:	02 d0       	rcall	.+4      	; 0x1734 <__ultoa_invert+0x84>
    1730:	a9 f7       	brne	.-22     	; 0x171c <__ultoa_invert+0x6c>
    1732:	ea cf       	rjmp	.-44     	; 0x1708 <__ultoa_invert+0x58>
    1734:	b4 e0       	ldi	r27, 0x04	; 4
    1736:	a6 95       	lsr	r26
    1738:	97 95       	ror	r25
    173a:	87 95       	ror	r24
    173c:	77 95       	ror	r23
    173e:	67 95       	ror	r22
    1740:	ba 95       	dec	r27
    1742:	c9 f7       	brne	.-14     	; 0x1736 <__ultoa_invert+0x86>
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	61 05       	cpc	r22, r1
    1748:	71 05       	cpc	r23, r1
    174a:	08 95       	ret
    174c:	9b 01       	movw	r18, r22
    174e:	ac 01       	movw	r20, r24
    1750:	0a 2e       	mov	r0, r26
    1752:	06 94       	lsr	r0
    1754:	57 95       	ror	r21
    1756:	47 95       	ror	r20
    1758:	37 95       	ror	r19
    175a:	27 95       	ror	r18
    175c:	ba 95       	dec	r27
    175e:	c9 f7       	brne	.-14     	; 0x1752 <__ultoa_invert+0xa2>
    1760:	62 0f       	add	r22, r18
    1762:	73 1f       	adc	r23, r19
    1764:	84 1f       	adc	r24, r20
    1766:	95 1f       	adc	r25, r21
    1768:	a0 1d       	adc	r26, r0
    176a:	08 95       	ret

0000176c <_exit>:
    176c:	f8 94       	cli

0000176e <__stop_program>:
    176e:	ff cf       	rjmp	.-2      	; 0x176e <__stop_program>
